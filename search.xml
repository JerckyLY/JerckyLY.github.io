<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>江湖再见-重新开始</title>
    <url>/2022/05/01/%E6%B1%9F%E6%B9%96%E5%86%8D%E8%A7%81-%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div align="center"> <div style="margin: 1rem 0 0.7rem;font-size: 1.5em;color:#1f2d3d;font-weight: bold">江湖再见-重新开始</div> </div> 

<hr>
<div align="center"> <span style="color: #4ea7f9;font-size: 18px">任何人的人生都可以在某一个时间点重新开始，比如现在。</span> </div> 

<hr>
<h2 id="决定"><a href="#决定" class="headerlink" title="决定"></a>决定</h2><p>过完春季开工的第二周，终于鼓起勇气提出离职了。</p>
<p>春节在家期间考虑了很久，毕竟毕业到现在马上工作满五年了，也刚结完婚，不能像之前随意折腾了。跟家人商量了很久，也得到了媳<br>妇的支持后。终于还是决定离开郑州-这个生活了五年的城市，两个人一起去外地。</p>
<p>在上家公司工作差不多四年了，本以为离职会有些波折，所幸最后还是很顺利的。</p>
<p>22年的3月19号，我跟媳妇踏上了开往北京的火车。在高铁上看着手机之前的照片，看着那些日常生活的点点滴滴,满满的都是回忆，<br>一切恍如隔日。</p>
<h2 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h2><p>17年毕业之后就从北京来到了郑州，这个之前听着熟悉却很陌生的城市。最开始我还是对郑州很期待的，因为当时那个她在这座城市。<br>可能这就是所谓的<strong>爱屋及乌</strong>吧。</p>
<p>而在我满怀着期望去参加了一个大型人才招聘会之后，我对这个城市的好感下降了到地平线。我没想到的是招聘会的几十个招聘公司，<br>有70% - 80% 都是招聘销售的。其中一个公司的人事，我从进门开始就一直跟着我说让我改行去做销售。等我转了一半的时候才放弃跟<br>随我，当时只是觉得那个人事女生太执着。现在回头看，可能她只是想多拿一点微薄的提成罢了。毕竟在一个平均月薪工资三千五的城<br>市里，除去吃穿住行的花销之后，还能剩余多少呢。我自己在郑州第一年，过年手里只有三千块不到，那时工资是3800。</p>
<p><strong>“郑州挣钱郑州花，一分钱也别想带回家”</strong> 也许这是在郑州打工的大多数人的真实写照。</p>
<p>18年的5月份换了一家公司，当时也没想到会在这个公司工作四年。那时候，内心充满了对行业技术提升的渴望，正好这家公司提供了<br>机会。刚开始公司只有七八个人，上班的时候却很开心。后来公司人越来越多之后，再难回到之前的感觉了，这应该也是职场常态吧。</p>
<p>在这家公司工作期间，经历了人生第一次出差，第一次坐飞机，第一次去潮汕，第一次去广州。那时候基本上每个月都会出一次差，而<br>出差回来的那天，不管多晚，那个她总会等着我。那时候那个她还没变，还是那个好女孩。</p>
<p>一切看起来似乎都是向往着美好的方向发展。</p>
<p>19年的时候，公司已经搬了三次家了。我那时候在郑州也换了五次住的地方，如果算上刚来郑州的时候借住同学的住处，就是换六次<br>了。那年的五一假期，我跟那个她订婚了。也因为订婚躲过了五一加班，当时还挺开心，现在想想还不如去加班，只能说世事无常。</p>
<p>订婚后，我和那个她找了一个离她公司走路只有十分钟路程的房子。而我上班要走路去坐地铁，再转公交到公司，通勤一个多少小时。<br>我在一个新一线城市（在我看来还不如一个三线城市）的通勤都和在一线的城市一样了，我现在在北京，从住的地方到公司，通勤也<br>就一个小时而已。而当时在郑州的工资却少的可怜。当时每天能坚持下来，也是因为那个她。</p>
<p>然后过了三个月，她在老家休息几天回来之后，跟我见面的第一句话就是：我们分开吧。</p>
<p>理由：我们不合适。</p>
<p>后来，就是行尸走肉一般，夜里睡两三个小时，白天996的上班，瘦了十几斤。</p>
<p>所幸，在那期间，我现在的媳妇她一直默默安慰陪伴着我。</p>
<p>我一句肚子有点不舒服，搁在平常对我来说着很正常，过一会就没事了。然而我媳妇那晚买完药给我送过来了。之后还做完晚饭送来。<br>给我过生日，等等还有很多，这是我在跟那个她一起时从未感受到的温暖。</p>
<p><strong>有妻如此，夫复何求。</strong></p>
<p>19年末，武汉疫情爆发，在家办公一个多月。那时候每天跟家人一起，即使夜里加班到12点多，手脚冰凉，依旧怡然自乐。家，是最<br>温暖的地方，能治愈一切。</p>
<p>20年5月份，跟媳妇一起在公司附近租了一个房子。每天走路上下班，十几分钟的路程。晚上下班在家做做饭。记得刚搬过去的时候，<br>体重是59.99kg，过年回家之后就是66kg。果真是幸福肥啊。hhhhhh!</p>
<p>21年 <code>**5月6日**</code> 我们领了证。 <code>**5月17日**</code> 在家办的婚礼。婚礼当天，在舞台上的我真的是喜极而泣。</p>
<p><code>7月20号</code> 我们经历了郑州特大洪水。当天早上就开始下雨，那时降雨量还没这么多。到了下午两点多的时候，公司楼下的马路上，已<br>经看不到了路面。那天下班都是躺着水回去的。后来才知道，地铁5号线到灌水，不少人在里面失去了生命。默哀。</p>
<p>这是下午两点多，公司楼下的马路。<br><video src='4.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></p>
<p>这是提前下班回去的路上<br><video src='5.mp4' type='video/mp4' controls='controls'  width='100%' height='300'></video></p>
<p><video src='1.mp4' type='video/mp4' controls='controls'  width='100%' height='300'></video></p>
<p>这是在媳妇公司楼下等她的时候拍的，都是找的大吊车拖车，小车根本不行。</p>
<p><video src='3.mp4' type='video/mp4' controls='controls'  width='100%' height='300'></video></p>
<p>这是接媳妇下班回去。这路中间的水很急，都是拉着慢慢走。</p>
<p><video src='2.mp4' type='video/mp4' controls='controls'  width='100%' height='300'></video></p>
<p>紧着8月又出现了疫情，开始全员核酸。再之后11月份出现疫情，再次全员核酸。</p>
<p>临近过年的时候，也是再次出现疫情。那十几天，天天做核酸。2022年的新年第一签是棉签。</p>
<p>看一下照片了解21年下半年，郑州的坎坷之路。<br><img src="2.jpg"/></p>
<p>在郑州收获了有结果的爱情，也交到了新的朋友。在郑州这几年他们帮助我很多。刚去郑州的时候，是他们让我在初到一个陌生的城市<br>时，不会感到无助。在我失恋时，我一个电话，同学就从外地到郑州陪我喝酒。朋友不在多，真心就好。</p>
<p><code>在此，祝愿他们，也祝愿大家一切安好！</code></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>到了北京在酒店安顿之后，我跟媳妇就一起去看房子了。因为在郑州的时候就提前联系好了中介，所以下午去看了几个房子之后就直接<br>定了，回去的路上两个人感觉有点太快了，有点不敢相信。</p>
<p>第二天搬行李，到房间稍微安置一下就算是在北京暂居了。</p>
<p>由于之前都是在郑州面试，确定了offer才来的北京。加上大学的时候在北京的大兴区，13号线地铁基本没在早高峰坐过。就特意在去公<br>司报道的前一天早起感受一下地铁的早高峰什么样子。之前都说西二旗是最挤的，但是我去的那天发现没有想象中的那么多，地铁门口<br>也没有进行限流。都在自己接受的范围内。查了一下原因，网上说一个是增加了自行车公路，可以直接骑自行车区公司。一个是因为疫<br>情的缘故，不少人都离开北京了。</p>
<p>按计划，本该是去报道的那天。我当时也在公交车上，马上到地铁了。接到了媳妇的电话，她哭着说肚子疼的不能动了。我赶紧下车，<br>打了车赶紧回去。路上也跟新公司的人事说了一下情况。回到屋里，看到媳妇的情况之后，立刻打了120。说实话这是我人生中第一次<br>打120。也才知道，救护车其实跟医院是单独分开的。它是一个流动站，接到人之后就送往最近的医院。然后就是进医院，挂急诊，做<br>核酸。</p>
<p>因为我们从郑州来的，需要在发热门诊做核酸，结果出来之后才能开始看病。当时真的是心急，媳妇肚子疼的都不能动了，不停询问。<br>早上就去的医院结果等到下午四点多才给开的药，输液。疫情真是给生活带来巨大的麻烦。在等核酸结果的时候，媳妇说：她是不是不<br>该来北京。我半开玩笑的说，万事开头难，这是想让我们留下深刻回忆，会好的，以后会越来也很多。</p>
<p>两天的输液之后，媳妇已经恢复正常了。我就去了新公司报道。公司的同事很好，公司氛围也挺好，轻松活跃。不像在郑州的时候，大<br>家都是忙着自己的，很少有沟通。</p>
<p>如今也工作一个月了，新公司也基本都熟悉了。同事之间也会一起聊天开开玩笑什么的。挺好。媳妇她在附近找了一个公司，每天骑电<br>车15分钟，早上她会送我到地铁口。这种生活简单，但我感觉也挺幸福的，哈哈哈！</p>
<p>今天是五一，祝大家五一节日快乐！北京这几天正是疫情严重的时候，现在去公共场所都是需要48小时的核酸阴性证明。原本带媳妇去<br>故宫的计划也泡汤了。老老实实在家呆着就好了，待会还得去做小区全员核酸了。 </p>
<p><strong><code>希望疫情早点消失，回到那个不用人人核酸，不用人人戴口罩，可以到处去旅游的时代</code></strong></p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-OESnCeRh" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-OESnCeRh"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "无名的人",
              author: "毛不易",
              url: "https://freetyst.nf.migu.cn/public/product9th/product45/2022/03/0409/2021%E5%B9%B412%E6%9C%8817%E6%97%A517%E7%82%B902%E5%88%86%E7%B4%A7%E6%80%A5%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E9%9F%B3%E4%B9%8B%E9%82%A61%E9%A6%96740373/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/60071702603095528.mp3?Key=2c627a1186d4d16d&Tim=1650100755693&channelid=00&msisdn=c31a97c1aedd4918a5ae5fcfc45be443&CI=600717026032600919000005498542&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2021/1214/1656/AS7cd46d7fced5bd51e7406deda3cfd77b.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>北漂</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium系列(10)--三维双屏对比</title>
    <url>/2021/12/07/Cesium%E5%85%A5%E9%97%A8-10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div align="center"> <div style="margin: 1rem 0 0.7rem;font-size: 1.5em;color:#1f2d3d;font-weight: bold">Cesium双屏对比</div> </div> 

<p>距离上个博客更新已经过去两三个月了，期间前期一直忙着做项目，后面又是两三个项目一起改bug，改需求……。终于忙碌的日子里，今天能偷得半日闲，那继续开始修炼吧。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>上个博客介绍了怎么用 <strong>OpenLayers</strong> 跟 <strong>Cesium</strong> 结合来现在二三维联动展示，在近期的项目中，有个需求是地下管网模型，跟倾斜模型<br>同时展示效果图如下：<br> <img src='2.png' /><br>那用二三维联动就没法满足需求了。得是两个三维 <strong>Viewer</strong> 联动才行。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>相比二三维根据获取当前屏幕范围来实现联动，双屏联动就相对简单些。可以利用 <strong>Viewer.camera.changed</strong> 事件来监听变换，然后获<br>取当前的 <strong>Viewer.camera</strong> 的值，去更新另一个 <strong>Viewer</strong> 相机的位置。</p>
<blockquote>
<p> <strong>Viewer.camera.setView({…})</strong></p>
</blockquote>
<div class="note danger flat"><blockquote>
<p>监听变化的时候，需要调整一下 <strong>viewer.camera.percentageChanged</strong>的值，取值范围是 0~1，默认是 0.5。 越小，联动的越丝滑。<br>我用的是 0.001，看起来相对丝滑些。
    </p>
</blockquote>
</div> 

<h2 id="核心实现"><a href="#核心实现" class="headerlink" title="核心实现"></a>核心实现</h2><ol>
<li>给创建的两个<strong>Viewer.camera.changed</strong> 添加监听事件。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">initViewerEvent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">this</span>.viewer.camera.changed.addEventListener(<span class="built_in">this</span>.vieweExtentChange);</span><br><span class="line">   <span class="built_in">this</span>.viewer.camera.percentageChanged = <span class="number">0.001</span>;</span><br><span class="line">   <span class="comment">// this.viewer.camera.percentageChanged = 0.8;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">this</span>.cmViewer.camera.changed.addEventListener(<span class="built_in">this</span>.vieweEXExtentChange);</span><br><span class="line">   <span class="built_in">this</span>.cmViewer.camera.percentageChanged = <span class="number">0.001</span>;</span><br><span class="line">   <span class="comment">// this.cmViewer.camera.percentageChanged = 0.8;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">this</span>.vieweExtentChange()</span><br><span class="line">   <span class="built_in">this</span>.viewerDiv.style.visibility = <span class="string">&#x27;visible&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">vieweExtentChange</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="built_in">this</span>.cmViewer.camera.changed.removeEventListener(<span class="built_in">this</span>.vieweEXExtentChange);</span><br><span class="line">   <span class="built_in">this</span>.updateView(<span class="built_in">this</span>.viewer, <span class="built_in">this</span>.cmViewer);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">this</span>.cmViewer.camera.changed.addEventListener(<span class="built_in">this</span>.vieweEXExtentChange);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="title">vieweEXExtentChange</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">this</span>.viewer.camera.changed.removeEventListener(<span class="built_in">this</span>.vieweExtentChange);</span><br><span class="line">   <span class="built_in">this</span>.updateView(<span class="built_in">this</span>.cmViewer, <span class="built_in">this</span>.viewer);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">this</span>.viewer.camera.changed.addEventListener(<span class="built_in">this</span>.vieweExtentChange);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
<li>更新相机视角<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">updateView</span>(<span class="params">viewerChange,viewerUpdate</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> camera = viewerChange.camera</span><br><span class="line">    viewerUpdate.camera.setView(&#123;</span><br><span class="line">        <span class="attr">destination</span>:camera.position,</span><br><span class="line">        <span class="attr">orientation</span>: &#123;</span><br><span class="line">            <span class="attr">heading</span>: camera.heading,</span><br><span class="line">            <span class="attr">pitch</span>: camera.pitch,</span><br><span class="line">            <span class="attr">roll</span>: camera.roll</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>看一下 <strong>viewer.camera.percentageChanged</strong> 不同值的联动效果</p>
<ul>
<li><p>赋值0.8</p>
<video   controls width='100%' autoplay height='100%'>
 <source src="1.mp4" type="video/mp4">
</video>
</li>
<li><p>赋值0.001</p>
<video   controls width='100%' autoplay height='100%'>
  <source src="2.mp4" type="video/mp4">
</video> 

</li>
</ul>
<p>最后加上卷帘的效果</p>
<ul>
<li>卷帘<video   controls width='100%' autoplay height='100%'>
   <source src="3.mp4" type="video/mp4">
</video> 

</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的功能基本是能满足项目的需求，这里只是介绍基本实现，具体 <strong>Viewer</strong> 里面展示的内容，根据项目实际需求来丰富内容即可。根<br>据核心代码基本就能自己完成功能了，就不再上传源码啦。</p>
<h2 id="题外分享"><a href="#题外分享" class="headerlink" title="题外分享"></a>题外分享</h2><p>之前看了一个有趣的小工具 <strong>RunCat</strong> , 在 Windows 任务栏，随 CPU 越跑越快的猫 <a href='https://www.appinn.com/runcat-for-windows/' target="_blank" >介绍</a>。自己就下载安装了一下，还挺好玩。<br>  <img src='1.gif' /><br>请忽略录制效果￣□￣｜｜</p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-RSgDRewH" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-RSgDRewH"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "你的眼神",
              author: "蔡琴",
              url: "https://lc-gluttony.s3.amazonaws.com/LJltQYKflcAs/yatJ97AitORttQkDK1pi9UcpOWmCItYQ/%E8%94%A1%E7%90%B4-%E4%BD%A0%E7%9A%84%E7%9C%BC%E7%A5%9E.mp3",
              pic: "https://imgessl.kugou.com/stdmusic/20191224/20191224110806951564.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>Cesium</category>
      </categories>
      <tags>
        <tag>cesium</tag>
        <tag>webgis</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium工具封装展示</title>
    <url>/2021/11/06/Cesium%E5%B7%A5%E5%85%B7%E5%B0%81%E8%A3%85%E5%B1%95%E7%A4%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cesium基本工具封装展示"><a href="#Cesium基本工具封装展示" class="headerlink" title="Cesium基本工具封装展示"></a><center>Cesium基本工具封装展示<center/></h2><p>很久没更新博客了，最近一段时间主要是忙着整理之前项目中实现的 Cesium 相关功能，结合 Vue 对这些工具进行封装，提供一个管理的工具条组件。能按照配置文件加载需要显示的工具，以及工具间的激活互斥。同时创建 <strong>Viewer</strong> 的时候，添加了一些辅助和美化。说了再多都没用，直接上链接 <a href='http://jerckly.gitee.io/cesium-view/#/' target="_blank" >演示地址</a></p>
 <div class="note danger flat"><blockquote>
<p>演示中的模型是在群文件里面下载的，如有侵权请联系我，及时修改！
    </p>
</blockquote>
</div> 

<h2 id="功能总览"><a href="#功能总览" class="headerlink" title="功能总览"></a>功能总览</h2> <div class="note info flat"><blockquote>
<p>先说一哈，视频很多，道友的流量记得备足！(视频的比gif还小，我用视频了)
    </p>
</blockquote>
</div> 

<ul>
<li>整体界面<br><img src="1.png"><br>界面上能到到，近地天空图我换成了蓝天白云（照片也是网上找的，很粗糙 O.o）。右下角添加了经纬度坐标以及当前的帧率显示。同时美化了鼠标操作以及修改了默认的操作按键顺序（右键《==》中键）。<br><video src='1.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>雪效果<br><video src='2.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>雨效果<br><video src='3.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>空间测距<br> <video src='4.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>贴地测距<br> <video src='5.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>空间测面<br> <video src='6.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>贴地测面<br> <video src='7.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>高程测量<br> <video src='8.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>方位角测量<br> <video src='9.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>土方量测量<br>   <video src='10.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>可视域分析<br>   <video src='11.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>通视分析<br>   <video src='12.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>缓冲区分析<br>   <video src='13.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>日照分析<br>   <video src='14.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>多边形视频融合<br>  <video src='15.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
<li>第一人称路径漫游<br>  <video src='16.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的功能很多都是按照 火星科技 里面的案例为原型来实现。还有一部分功能没有加上去，后续会添加。比如标绘，二三维联动等等。在封装的过程中，因为是结合 Vue 来实现的，由于Vue 的监听机制原因，所以三维里面很多定义的变量是不能放到 <strong>data</strong> 里面去的， 切记 <strong>props</strong> 也不行。当然知道和去真正实现还是有差距的，前面就是因为吃过这个亏，所以每次激活功能的时候，帧率就会下降。也是调了半天才发现的。在这里当作反面教材给大家提醒一下，切记！！！<br> <div class="note danger flat"><blockquote>
<p>实例化的 Cesium.Viewer() 不能放到 Vue 中的 <strong>data</strong> 和 <strong>props</strong>中。不然会很卡顿！！！
    </p>
</blockquote>
</div> </p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-xbhBKdAI" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-xbhBKdAI"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "你应该很快乐",
              author: "虎二",
              url: "https://freetyst.nf.migu.cn/public/product5th/product35/2019/11/1310/2019%E5%B9%B411%E6%9C%8811%E6%97%A514%E7%82%B915%E5%88%86%E7%B4%A7%E6%80%A5%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E5%8D%8E%E5%A4%8F%E5%8A%A8%E5%A3%B01%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/63254103486.mp3?key=179ebe1b401a1026&Tim=1616140847963&channelid=00&msisdn=b2a5086abb09405c82b502bc446b1e97&CI=632541034862600913000007296966&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/0802/0246/AS6e9ed85020aa374dbc96a3125eabf4f2.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>Cesium</category>
      </categories>
  </entry>
  <entry>
    <title>Cesium系列(9)--二三维联动</title>
    <url>/2021/09/10/Cesium%E5%85%A5%E9%97%A8-9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<div align="center"> <span style="color: #4ea7f9;font-size: 24px">千言万语，道不尽那年那月。万水千山，隔不断缕缕师恩。</span> </div> 
<div align="center"> <span style="color: #4ea7f9;font-size: 18px">祝老师们节日快乐！您辛苦了！</span> </div>

<hr>
<div align="center"> <div style="margin: 1rem 0 0.7rem;font-size: 1.5em;color:#1f2d3d;font-weight: bold">Cesium + Openlayers 二三维联动</div> </div> 


<h2 id="为何不用-Cesium-二维模式"><a href="#为何不用-Cesium-二维模式" class="headerlink" title="为何不用 Cesium 二维模式"></a>为何不用 Cesium 二维模式</h2><p> <strong>Cesium</strong> 虽然支持二维模式，但它毕竟的专注方向还是在三维方面。在二维模式下，跟专注于做二维的 <strong>OpenLayers</strong> 或者 <strong>Leaflet</strong>，以及<br> 二维起步，现在开始支持三维的 <strong>MapboxGL</strong> 相比。Cesium的二维模式，总感觉差了那么点意思。我在实际项目的使用中，用 <strong>Cesium</strong><br> 二维模式加载自己的切片服务，由于 <strong>Cesium</strong> 层级的概念，跟二维的层级概念有些区别。因此同样的服务，统一的比例尺下，看的效果<br>  <strong>Cesium</strong> 总是有点差强人意。 看下对比效果：<br> <img src='2.png' /><br> <div align="center">Cesium加载展示</div><br> <img src='3.png' /><br>  <div align="center">Openlayers加载展示</div></p>
<p>所以项目中期，二维部分的功能用 <strong>Openlayers</strong>  代替了，说多了都是泪 o(╥﹏╥)o。   </p>
<p>废话不多说，先看结果：</p>
<h2 id="上菜"><a href="#上菜" class="headerlink" title="上菜"></a>上菜</h2>  <video   controls width='100%' autoplay height='100%'>
    <source src="1.mp4" type="video/mp4">
  </video>
 
 想体验的道友们，可以访问 <a href='http://jerckly.gitee.io/cesium-view/#/' target='_blank'>这里</a>。左侧工具条第三个。

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol>
<li><p>js动态创建二维地图容器。在三维界面左侧。调整宽度样式，整体呈两侧布局。</p>
</li>
<li><p>由于 <strong>Cesium</strong> 不能直接获取当前层级，因此根据当前视图范围来同步二维界面。 利用 <strong>Cesium</strong> 中的 <strong>preRender</strong> 渲染事件，实时获取三维当前视窗，同时设置二维的视图范围。</p>
</li>
<li><p>同样二维中监听中心点 <strong>change:center</strong> 事件，实时设置三维的视窗</p>
</li>
<li><p>根据当前鼠标在二维或者三维的视口判断，来防止无限循环同步设置。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2></li>
<li><p>初始化二维地图容器，创建地图视图</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化地图容器，插入三维容器的左侧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">init2DDiv</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.mapDiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.mapDiv.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="built_in">this</span>.mapId)</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">this</span>.mapDiv.style.width = <span class="string">&#x27;0%&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.mapDiv.style.height = <span class="string">&#x27;100%&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.mapDiv.style.position = <span class="string">&#x27;relative&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.mapDiv.style.visibility = <span class="string">&#x27;hidden&#x27;</span></span><br><span class="line">    <span class="comment">// insertBefor</span></span><br><span class="line">    <span class="keyword">const</span> viewerContainer = <span class="built_in">this</span>.viewer.cesiumWidget.container.parentElement.parentElement</span><br><span class="line">    viewerContainer.parentNode.insertBefore(<span class="built_in">this</span>.mapDiv, viewerContainer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 初始化地图视图</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="title">init2DMap</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">// const originView = GlobeView.Map2DViewer.getView()</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="keyword">const</span> layer = <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">       <span class="attr">source</span>:<span class="keyword">new</span> ol.source.XYZ(&#123;</span><br><span class="line">           <span class="attr">url</span>:<span class="string">&#x27;https://server.arcgisonline.com/arcgis/rest/services/World_Street_Map/MapServer/tile/&#123;z&#125;/&#123;y&#125;/&#123;x&#125;&#x27;</span></span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="built_in">this</span>.olMap = <span class="keyword">new</span> ol.Map(&#123;</span><br><span class="line">       <span class="attr">layers</span>:[layer],</span><br><span class="line">       <span class="attr">target</span>: <span class="built_in">this</span>.mapId,</span><br><span class="line">       <span class="attr">view</span>: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">           <span class="attr">center</span>: [<span class="number">13818313.960985335</span>, <span class="number">6519709.935426011</span>],</span><br><span class="line">           <span class="attr">zoom</span>: <span class="number">8</span>,</span><br><span class="line">           <span class="attr">projection</span>: <span class="string">&#x27;EPSG:3857&#x27;</span>,</span><br><span class="line">           <span class="attr">maxZoom</span>:<span class="number">22</span></span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">this</span>.olMap.updateSize()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note danger flat"><blockquote>
<p>注意样式调整两侧布局，我用的是弹性盒子布局。即： <strong>display: flex</strong>
 </p>
</blockquote>
</div> 

<img src="4.png" />
</li>
<li><p>三维监听事件处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三维监听事件处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">getViewCameraRectrange</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> rectangle = <span class="built_in">this</span>.viewer.camera.computeViewRectangle();</span><br><span class="line">    <span class="comment">// 弧度转为经纬度</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> west = (rectangle.west / <span class="built_in">Math</span>.PI) * <span class="number">180</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> north = (rectangle.north / <span class="built_in">Math</span>.PI) * <span class="number">180</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> east = (rectangle.east / <span class="built_in">Math</span>.PI) * <span class="number">180</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> south = (rectangle.south / <span class="built_in">Math</span>.PI) * <span class="number">180</span>;</span><br><span class="line">    <span class="comment">//三维联动二维界面</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.isIn2DMapFlag) &#123;</span><br><span class="line">        <span class="keyword">if</span> (north &gt; <span class="number">87</span> &amp;&amp; south &lt; -<span class="number">87</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> center = <span class="built_in">this</span>.getCenterPosition(<span class="built_in">this</span>.viewer);</span><br><span class="line">            <span class="built_in">this</span>.olMap.getView().setZoom(<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">this</span>.olMap.getView().setCenter(ol.proj.transform([center.lon,center.lat],<span class="string">&#x27;EPSG:4326&#x27;</span>,<span class="string">&#x27;EPSG:3857&#x27;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// console.log(west, south, east, north);</span></span><br><span class="line">            <span class="comment">// this.olMap.getView().fit([transform(west,&#x27;EPSG:4326&#x27;,&#x27;EPSG:3857&#x27;), transform(south,&#x27;EPSG:4326&#x27;,&#x27;EPSG:3857&#x27;), transform(east,&#x27;EPSG:4326&#x27;,&#x27;EPSG:3857&#x27;), transform(north,&#x27;EPSG:4326&#x27;,&#x27;EPSG:3857&#x27;)]);</span></span><br><span class="line">            <span class="built_in">this</span>.olMap.getView().fit(ol.proj.transformExtent([west,south, east, north],<span class="string">&#x27;EPSG:4326&#x27;</span>,<span class="string">&#x27;EPSG:3857&#x27;</span>));</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>二维监听事件处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二维监听事件处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">changeCenterListener</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isIn2DMapFlag) &#123;</span><br><span class="line">        <span class="keyword">const</span> bounds = <span class="built_in">this</span>.olMap.getView().calculateExtent();</span><br><span class="line">        <span class="keyword">const</span> boundsTansform = ol.proj.transformExtent(bounds,<span class="string">&#x27;EPSG:3857&#x27;</span>,<span class="string">&#x27;EPSG:4326&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.viewer.camera.setView(&#123;</span><br><span class="line">            <span class="attr">destination</span>: Cesium.Rectangle.fromDegrees(</span><br><span class="line">                boundsTansform[<span class="number">0</span>],</span><br><span class="line">                boundsTansform[<span class="number">1</span>],</span><br><span class="line">                boundsTansform[<span class="number">2</span>],</span><br><span class="line">                boundsTansform[<span class="number">3</span>],</span><br><span class="line">            )</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>判断当前鼠标是否在二维视图中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断鼠标是否在二维地图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">y</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">isMouseIn2DMap</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> y1 = <span class="built_in">this</span>.mapDiv.offsetTop; <span class="comment">//div上面两个的点的y值</span></span><br><span class="line">    <span class="keyword">let</span> y2 = y1 + <span class="built_in">this</span>.mapDiv.clientHeight; <span class="comment">//div下面两个点的y值</span></span><br><span class="line">    <span class="keyword">let</span> x1 = <span class="built_in">this</span>.mapDiv.offsetLeft; <span class="comment">//div左边两个的点的x值</span></span><br><span class="line">    <span class="keyword">let</span> x2 = x1 + <span class="built_in">this</span>.mapDiv.clientWidth; <span class="comment">//div右边两个点的x的值</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; x1 || x &gt; x2 || y &lt; y1 || y &gt; y2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="keyword">new</span> Cesium2DLinkage3DUtil()</span><br><span class="line"><span class="comment">//启动联动</span></span><br><span class="line">linkUtil.active(viewer)</span><br><span class="line"><span class="comment">//关闭联动</span></span><br><span class="line">linkUtil.deactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>  完整代码都放到 <strong>github</strong> 上，需要的移步<a href='https://github.com/JerckyLY/cesium-demo-view' target="_blank" >Cesium-demo-view</a>  </p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-RXcqPUrg" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-RXcqPUrg"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "道道道",
              author: "国语",
              url: "https://lc-gluttony.s3.amazonaws.com/LJltQYKflcAs/UuHgt2XXkgrCo2MuTJ3Jamu0yKVEOqQp/%E5%9B%BD%E8%AF%AD-%E9%81%93%E9%81%93%E9%81%93.mp3",
              pic: "https://imgessl.kugou.com/stdmusic/20150718/20150718141335609634.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>Cesium</category>
      </categories>
      <tags>
        <tag>cesium</tag>
        <tag>webgis</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium系列(8)--自定义帧率显示</title>
    <url>/2021/06/23/Cesium%E5%85%A5%E9%97%A8-8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cesium自定义帧率显示"><a href="#Cesium自定义帧率显示" class="headerlink" title="Cesium自定义帧率显示"></a><center>Cesium自定义帧率显示<center/></h2><p> <strong>Cesium</strong> 提供了不少用于调试的工具，特别方便在开发的时候使用。其中帧率显示特别方便我们对性能调试。因为帧率到了30以下就基<br> 本会开始卡顿了。如果想一直显示帧率，直接用 <strong>Cesium</strong> 默认的话，有时候会跟我们的界面的整体风格不搭配。那么就得自定义来实现<br> 了。</p>
<h2 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h2>  <div style="display: flex;justify-content: space-between;align-items: center" >
        <img src="1.png" >
        <img src="2.png">
  </div>
  
 看个动态的
  <video   controls width='100%' autoplay height='100%'>
    <source src="1.mp4" type="video/mp4">
  </video>
 
 因为用的是 **Cesium** 中的 **postRender** 监听事件，所以多少会跟自带的毫米值（ms）有点区别， 但是跟PFS值基本保持一致。而有参考价
 值的主要是 FPS值，在实际使用中，这一点点的差距不会影响判断。
 
## 实现
代码的实现很简单，我也是在源代码中查找的，然后改了一下。

<ul>
<li><p>源代码 Source\Scene\PerformanceDisplay.js</p>
<img src="3.png"/>
</li>
<li><p>代码修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CesiumFPSUtil</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">containerId</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = containerId || <span class="string">&quot;fpsdiv&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>._lastFpsSampleTime = getTimestamp();</span><br><span class="line">    <span class="built_in">this</span>._lastMsSampleTime = getTimestamp();</span><br><span class="line">    <span class="built_in">this</span>._fpsFrameCount = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>._msFrameCount = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.createDiv();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">createDiv</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = <span class="built_in">document</span>.getElementById(<span class="built_in">this</span>.id);</span><br><span class="line">    <span class="keyword">const</span> fpsDiv = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    fpsDiv.className = <span class="string">&quot;info-content&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>._fpsText = <span class="built_in">document</span>.createElement(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>._msText = <span class="built_in">document</span>.createElement(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">    fpsDiv.append(<span class="built_in">this</span>._fpsText);</span><br><span class="line">    fpsDiv.append(<span class="built_in">this</span>._msText);</span><br><span class="line">    parent.append(fpsDiv);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> time = getTimestamp();</span><br><span class="line">    <span class="built_in">this</span>._fpsFrameCount++;</span><br><span class="line">    <span class="keyword">let</span> updateDisplay = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> fpsElapsedTime = time - <span class="built_in">this</span>._lastFpsSampleTime;</span><br><span class="line">    <span class="keyword">if</span> (fpsElapsedTime &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> fps = <span class="string">&quot;N/A&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (updateDisplay) &#123;</span><br><span class="line">        fps = ((<span class="built_in">this</span>._fpsFrameCount * <span class="number">1000</span>) / fpsElapsedTime) | <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>._fpsText.innerText = fps + <span class="string">&quot; FPS&quot;</span>;</span><br><span class="line">      <span class="built_in">this</span>._lastFpsSampleTime = time;</span><br><span class="line">      <span class="built_in">this</span>._fpsFrameCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>._msFrameCount++;</span><br><span class="line">    <span class="keyword">let</span> msElapsedTime = time - <span class="built_in">this</span>._lastMsSampleTime;</span><br><span class="line">    <span class="keyword">if</span> (msElapsedTime &gt; <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> ms = <span class="string">&quot;N/A&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (updateDisplay) &#123;</span><br><span class="line">        ms = (msElapsedTime / <span class="built_in">this</span>._msFrameCount).toFixed(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>._msText.innerText = ms + <span class="string">&quot; MS&quot;</span>;</span><br><span class="line">      <span class="built_in">this</span>._lastMsSampleTime = time;</span><br><span class="line">      <span class="built_in">this</span>._msFrameCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>相关函数getTimestamp</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTimestamp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> getTime;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> performance !== <span class="string">&quot;undefined&quot;</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> performance.now === <span class="string">&quot;function&quot;</span> &amp;&amp;</span><br><span class="line">    <span class="built_in">isFinite</span>(performance.now())</span><br><span class="line">  ) &#123;</span><br><span class="line">    getTime = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> performance.now();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    getTime = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//帧率显示</span></span><br><span class="line">  <span class="keyword">const</span> fpsInfo = <span class="keyword">new</span> CesiumFPSUtil(<span class="string">&#x27;fpsdiv&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> fpsPostEvent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">      fpsInfo.update()</span><br><span class="line">  &#125;</span><br><span class="line">  viewer.scene.postRender.addEventListener(fpsPostEvent)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>  完整代码都放到 <strong>github</strong> 上，需要的移步<a href='https://github.com/JerckyLY/cesium-demo-view' target="_blank" >Cesium-demo-view</a>  </p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-dsvRuMBJ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-dsvRuMBJ"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "光明",
              author: "谭艳",
              url: "https://lc-gluttony.s3.amazonaws.com/LJltQYKflcAs/8RbBFGccu3ci0lH0LqAl6O8WUBlLXNC8/%E8%B0%AD%E8%89%B3%20-%20%E5%85%89%E6%98%8E.mp3",
              pic: "https://imgessl.kugou.com/stdmusic/20210113/20210113211448850090.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>Cesium</category>
      </categories>
      <tags>
        <tag>cesium</tag>
        <tag>webgis</tag>
      </tags>
  </entry>
  <entry>
    <title>我们结婚啦</title>
    <url>/2021/06/17/%E6%88%91%E4%BB%AC%E7%BB%93%E5%A9%9A%E5%95%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我们结婚啦"><a href="#我们结婚啦" class="headerlink" title="我们结婚啦"></a><center>我们结婚啦<center/></h2><p>今天是我们结婚一个月纪念日，趁此机会记录一下我们结婚前的准备以及结婚时的点点滴滴，留作纪念。今天偷偷的给媳妇送了一束花到她公司，她还是很开心的，哈哈哈。</p>
<h2 id="婚期"><a href="#婚期" class="headerlink" title="婚期"></a>婚期</h2><p>经过两家人的商定，以及找的先生算的日子，婚期是定在了 <strong><code>2021年05月17号农历四月初六</code></strong> 。婚期定了之后，我们就开始为结婚忙碌了起来。</p>
<h2 id="婚纱照"><a href="#婚纱照" class="headerlink" title="婚纱照"></a>婚纱照</h2><p>婚纱照一天就拍完了，只是特别累。最后是想笑都笑不动了。虽然累， 但是挺开心的。发几张媳妇的照片 (#^.^#)</p>
<div style="display: flex;justify-content: space-between" ><img src="8.jpg"  /><img src="9.jpg"  /></div>
<div style="display: flex;justify-content: space-between" ><img src="10.jpg"  /><img src="11.jpg"  /></div>

<h2 id="领证"><a href="#领证" class="headerlink" title="领证"></a>领证</h2><p>公司与公司之间的婚假不一样，我这边只有法定的三天假，好在之前攒的调休比较多。我媳妇那只能请七天，而且必须要有结婚证才能<br>请假。本打算 <code>520</code> 去领证的，只能提前了。领证是在 <code>0506</code>五一假期结束的第一天，去了婚姻登记所之后通知先去复印证件。婚姻登<br>记所旁边的打印店，对于结婚复印证件都免费。哈哈，祝愿老板生意兴隆。媳妇还细心的备了喜糖，给了老板跟登记的工作人员。复印<br>完之后，我们开始登记，然后给了一份免费体检表，去医院体检完回来就可以直接领证啦。</p>
<h4 id="这是婚姻登记处"><a href="#这是婚姻登记处" class="headerlink" title="这是婚姻登记处:"></a>这是婚姻登记处:</h4><img src="12.jpg"  />

<h4 id="我们领证啦！"><a href="#我们领证啦！" class="headerlink" title="我们领证啦！"></a>我们领证啦！</h4><img src="7.jpg"  />


<h2 id="婚假"><a href="#婚假" class="headerlink" title="婚假"></a>婚假</h2><p>因为17号就结婚了，还有好多事没准备。去公司上了两天班，期间还请了一天去办事，然后就开始请婚假了。5月12号，回家。准备结婚！</p>
<h2 id="传谏"><a href="#传谏" class="headerlink" title="传谏"></a>传谏</h2><p>13号，传谏。目的是通知亲人我们要结婚了。我们这边的风俗是：早上我家这边的亲人来吃饭，同时媳妇那边的来媒人过来，我这边找<br>媒人陪着。然后中午媒人们跟着去她家。我也跟着去了，主要是为了让媳妇那边的亲戚都认识一下我。</p>
<h2 id="布置"><a href="#布置" class="headerlink" title="布置"></a>布置</h2><p>14号，把我这边的亲人都喊过来，大舅大妗，小舅小妗，小姨姨夫，姥姥姥爷。打气球的，扎气球的，在梯子上贴气球的。一家人聚<br>一起特别的开心，特别的温馨。看一下成果：（这些都是视频截图的，手机没怎么拍）<br><img src="14.png"  /><br><img src="15.png"  /></p>
<h2 id="到来"><a href="#到来" class="headerlink" title="到来"></a>到来</h2><p>15号，伴郎伴娘到来。有几个都是在一个地方，回来的时候坐一辆车回来的。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>16号，去试婚礼当天的礼服，还有伴郎伴娘的衣服。下午的时候，专门把车洗洗，明天要当婚车。开车又走了一趟明天接亲的路线，认<br>认路。晚上去车站接一个伴娘到来。同时家里婚庆的场景也来布置了。看一下场景。<br><img src="1.png"  /><br><img src="4.png"  /><br><img src="5.png"  /></p>
<h2 id="结婚"><a href="#结婚" class="headerlink" title="结婚"></a>结婚</h2><p>17号，早上五点我起来去接化妆师，顺便把媳妇的两个同学接过去。（回我家正好路过媳妇家）。<br>7点20，我们出发去接新娘。<br><img src="18.jpg"  /><br>早上走的时候太激动，把新娘的胸花给忘了拿了。就赶紧打电话让我姨夫送，期间催了好几次，因为接亲的车中途是不能停。<br>鉴于隐私以及图片很多，我就不把接亲的过程照片发了，发几张家乡的风景照吧。<br><img src="16.png"  /><br><img src="17.png"  /><br>中间的婚庆过程，我就不发了。来看一下新郎新娘们还有我的以及新娘的好朋友。特别感谢他（她）们能来参加我们的婚礼（照片的来源很多，请自动忽略像素问题￣□￣｜｜）。<br><img src="19.jpg"  /><br><img src="20.jpg"  /><br><img src="21.jpg"  /></p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>其实中间还有很多部分都没写，不是不重要，是很重要一时间我无法言语来表达。</p>
<p>感谢我的家人们。为了我结婚的事，我爸妈也是忙碌了很多天。家里很多的布置都是他们在家弄的。家里的孩子我是老大，也是第一次<br>置办婚礼，很多都不懂的不知道的，都是我妈到处找人问该怎么弄。婚房是我爸重新买的白漆粉刷了一遍，地面是他们拖了好几遍。家<br>具也是一点点的搬到楼上。妹妹也在结婚那天充当记账的身份，在婚庆开始的时候，她一会儿跑过来看，一会儿跑过去记账。<br>父母的恩情，我们一辈子也还不完。</p>
<p>感谢岳父岳母。他们把女儿养育这么大也不容易，愿意让这么好的闺女嫁给我，感谢他们。</p>
<p>感谢我的亲人们。在外地的小姨跟姨夫，他们提前好几天请假回来参加我的婚礼。舅舅跟舅妈们也都来我家布置婚房，姥姥姥爷也来帮<br>忙。从小我就喜欢到姥姥家住，可以说他们是我最亲的亲人们，跟他们在一起我就很开心。大舅跟姨夫晚上还特意送了我们一场歌舞表演。小舅因为不得不跟着车队南下提前走而没能来参加婚礼。</p>
<p>感谢伴郎伴娘们。特别谢谢他们能来参加我们的婚礼，他们的时间也是很紧，有个伴娘结婚前一天还在考试，考完试就直接来了，半夜<br>才到。我的伴郎们也是请假来参加我的婚礼，提前来我们忙布置婚房。还有一个朋友，为了早点赶路来，车在路上还出了事，最后也是赶到了。特别谢谢他们。</p>
<p>感谢我的朋友们。因为婚期没有赶到节假日，所以好多同学，朋友们在外地没办法赶回来参加我的婚礼，但是也收到了他们的祝福。</p>
<p>感谢我的舅姥，他为了我的婚礼忙前忙后，我们的婚纱照，婚庆，车队，主持人都是他负责联系的，给我们的都是最好的，费用却是最少的。</p>
<p>最后感谢现场来参加我婚礼的邻里邻居们。</p>
<p>特别感谢杨同学愿意嫁给我，陪我一起渡过往后余生。</p>
<h2 id="后感"><a href="#后感" class="headerlink" title="后感"></a>后感</h2><p>第一次结婚，之前也没参加过婚礼。我的朋友们都一个个的喜欢单身，就我算是最早结婚的。回想一下自己结婚的过程，也有不少遗憾。比如：</p>
<p>在给媳妇送花讲话的时候，我也是大脑一片空白没有想好怎么说。</p>
<p>在婚庆上登台讲话，我没有好好准备，简单的几句就过去了。太激动了说不出来。舞台上，虽然我特意的跟主持人说不要那些煽情的环节，但是自己还是没忍住流泪。</p>
<p>在舞台上也没有时间去准备给媳妇唱首歌。</p>
<p>虽然有不少的遗憾，但是都是满满的回忆。正因为不完美，而更令人记忆深刻，更加的美好。</p>
<p><strong><code>我相信，未来会越来越好</code></strong></p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-PIYVAZrz" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-PIYVAZrz"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "你就是我想要的丫头",
              author: "赵照",
              url: "https://lc-gluttony.s3.amazonaws.com/LJltQYKflcAs/XeRkJhB3eGQuQFhF77UpWOV3GcaCLd1L/%E4%BD%A0%E5%B0%B1%E6%98%AF%E6%88%91%E6%83%B3%E8%A6%81%E7%9A%84%E4%B8%AB%E5%A4%B4-%E8%B5%B5%E7%85%A7.mp3",
              pic: "https://imgessl.kugou.com/stdmusic/20200909/20200909105356271665.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>

]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>开心时刻</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium系列(7)--方位角测量</title>
    <url>/2021/03/26/Cesium%E5%85%A5%E9%97%A8-7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cesium方位角测量-仿火星科技"><a href="#Cesium方位角测量-仿火星科技" class="headerlink" title="Cesium方位角测量(仿火星科技)"></a><center>Cesium方位角测量(仿火星科技)<center/></h2><p>接着之前的通用工具介绍来讲，今天主要介绍方位角测量。仿照火星科技的例子实现，可以连续测量。先上图：<br><img src="1.png"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先明白什么是方位角，百度百科介绍：</p>
<blockquote>
<p>方位角，又称地平经度(Azimuth angle，缩写为Az)，是在平面上量度物体之间的角度差的方法之一。是从某点的指北方向线起，依顺时针方向到目标方向线之间的水平夹角。</p>
</blockquote>
<p>从定义中得到几个关键信息：</p>
<ul>
<li>两个点， 起点和目标点</li>
<li>两点间顺时针的水平夹角</li>
</ul>
<p>根据上面的信息，想到的方法就是，根据起点建立一个 x东方向，y为北方向的局部坐标系(或者y为东，x为北)，计算出目标点在这个坐标系的局部坐标值，然后利用三角函数 <strong>arctan</strong>计算出夹角(图中角A的值)。<br><img src="2.png"></p>
<p><strong>Cesium</strong> 中提供了建立局部坐标系的方法</p>
<ul>
<li>以x为北，y东的局部坐标系<br><img src="3.png"></li>
<li>以y为北，x东的局部坐标系<br><img src="4.png"></li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>核心代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两个点的方位角度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">lng_a</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">lat_a</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">lng_b</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">lat_b</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="title">courseAngle</span>(<span class="params">lng_a, lat_a, lng_b, lat_b</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以a点为原点建立局部坐标系（东方向为y轴,北方向为x轴,垂直于地面为z轴），得到一个局部坐标到世界坐标转换的变换矩阵</span></span><br><span class="line">    <span class="comment">// const localToWorld_Matrix = Cesium.Transforms.northEastDownToFixedFrame(</span></span><br><span class="line">    <span class="comment">//     new Cesium.Cartesian3.fromDegrees(lng_a, lat_a)</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以a点为原点建立局部坐标系（东方向为x轴,北方向为y轴,垂直于地面为z轴），得到一个局部坐标到世界坐标转换的变换矩阵</span></span><br><span class="line">    <span class="keyword">const</span> localToWorld_Matrix = Cesium.Transforms.eastNorthUpToFixedFrame(</span><br><span class="line">        <span class="keyword">new</span> Cesium.Cartesian3.fromDegrees(lng_a, lat_a)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//求世界坐标到局部坐标的变换矩阵</span></span><br><span class="line">    <span class="keyword">const</span> worldToLocal_Matrix = Cesium.Matrix4.inverse(</span><br><span class="line">        localToWorld_Matrix,</span><br><span class="line">        <span class="keyword">new</span> Cesium.Matrix4()</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//a点在局部坐标的位置，其实就是局部坐标原点</span></span><br><span class="line">    <span class="keyword">const</span> localPosition_A = Cesium.Matrix4.multiplyByPoint(</span><br><span class="line">        worldToLocal_Matrix,</span><br><span class="line">        <span class="keyword">new</span> Cesium.Cartesian3.fromDegrees(lng_a, lat_a),</span><br><span class="line">        <span class="keyword">new</span> Cesium.Cartesian3()</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//B点在以A点为原点的局部的坐标位置</span></span><br><span class="line">    <span class="keyword">const</span> localPosition_B = Cesium.Matrix4.multiplyByPoint(</span><br><span class="line">        worldToLocal_Matrix,</span><br><span class="line">        <span class="keyword">new</span> Cesium.Cartesian3.fromDegrees(lng_b, lat_b),</span><br><span class="line">        <span class="keyword">new</span> Cesium.Cartesian3()</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//弧度</span></span><br><span class="line">    <span class="comment">// const angle = Math.atan2(</span></span><br><span class="line">    <span class="comment">//     localPosition_B.y - localPosition_A.y,</span></span><br><span class="line">    <span class="comment">//     localPosition_B.x - localPosition_A.x</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line">    <span class="comment">//弧度</span></span><br><span class="line">    <span class="keyword">const</span> angle = <span class="built_in">Math</span>.atan2(</span><br><span class="line">        localPosition_B.x - localPosition_A.x,</span><br><span class="line">        localPosition_B.y - localPosition_A.y</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//角度</span></span><br><span class="line">    <span class="keyword">let</span> theta = angle * (<span class="number">180</span> / <span class="built_in">Math</span>.PI);</span><br><span class="line">    <span class="keyword">if</span> (theta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        theta = theta + <span class="number">360</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> theta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我是按照以x轴为东方向，y为北方向为局部坐标系建立的(另一种方向的计算也写了出来，请自行查看)。主要就是弧度计算的时候，是以 <strong>△y</strong> 为对边 还是以 <strong>△x</strong> 为对边求来结果。</p>
<p><strong><code>天不生我李淳罡，剑道万古如长夜</code></strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>  完整代码都放到 <strong>github</strong> 上，需要的移步<a href='https://github.com/JerckyLY/cesium-demo-view' target="_blank" >Cesium-demo-view</a>  </p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-RjOweoiH" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-RjOweoiH"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "一生所爱",
              author: "卢冠廷",
              url: "https://freetyst.nf.migu.cn/public/product9th/product42/2020/11/1212/2018%E5%B9%B411%E6%9C%8810%E6%97%A517%E7%82%B915%E5%88%86%E6%89%B9%E9%87%8F%E9%A1%B9%E7%9B%AE%E6%AD%A3%E4%B8%9C96%E9%A6%96-14/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/6005661L4UR120847.mp3?key=630618d18d18efbe&Tim=1616756337808&channelid=00&msisdn=815357fdc13c49918109ab2a83bcbf1c&CI=6005661L4UR2600910000009386457&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/0727/1400/AS281933668a3d761be7a02ce37b24e5a2.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>

]]></content>
      <categories>
        <category>Cesium</category>
      </categories>
      <tags>
        <tag>cesium</tag>
        <tag>webgis</tag>
      </tags>
  </entry>
  <entry>
    <title>node-sqlite3简易后台搭建</title>
    <url>/2021/03/24/node-sqlite3%E7%AE%80%E6%98%93%E5%90%8E%E5%8F%B0%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="node-sqlite3简易后台搭建"><a href="#node-sqlite3简易后台搭建" class="headerlink" title="node-sqlite3简易后台搭建"></a><center>node-sqlite3简易后台搭建<center/></h2><p>最近项目需要写一个演示用的三维Demo，其中要有用户管理界面，能对用户进行增删改查操作。当然这都是小需求，随便就写了，也<br>没啥。但是给我说没人给我写接口（内心：嗯，嗯???)。虽然做过一段时间的全栈开发，突然让我写后台，我还是有点不适应。但是没<br>办法，任务来了，干吧！<br>之前写的是 <strong>Java</strong> + <strong>Mysql</strong> + <strong>SpringBoot</strong> 后台，但是一个简单的用户管理，再加一个登录的接口，我是真心不想用（其实忘了不少，不<br>会了 哈哈）。作为一个 <strong>WebGIS</strong> 码农，最熟悉的还是 <strong>JavaScript</strong> 。那能用 <strong>Js</strong> 写后台的莫过于 <strong>Node</strong>了，再结合 <strong>express</strong> 库，很轻便的<br>就可以搭建一个后台。接下来就是数据库了。目前，开源免费，又小巧轻便的 <strong>sqlite</strong> 多合适啊。 同时 <strong>Node</strong> 也有 <strong>sqlite3</strong> JS库可以操作<br>它。OK，技术选型定了，接下来就开始实现吧。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>对应<strong>Node</strong>的安装和配置，各位道友了解的比我都清楚，我就不多说了。主要讲一下 <strong>sqlite3</strong>的安装</p>
<ul>
<li><p>sqlite3 (windows)数据库安装<br> 下载地址 <a href="https://www.sqlite.org/download.html">https://www.sqlite.org/download.html</a><br> 需要下载 <strong>sqlite-dll-win32-86-xx.zip</strong> 或者 <strong>sqlite-dll-win64-xx.zip</strong> 以及 <strong>sqlite-tools-win32-x86-xx.zip</strong><br> <img src="1.png"><br> 把这两个解压之后，里面的文件放到一个文件夹下<br> <img src="2.png"><br> 然后在系统的环境变量中，在 <strong>Path</strong> 变量里面把存放 <strong>sqlit3</strong> 的文件夹路径添加进去<br> <img src="3.png"><br> 最后检查一下是否安装成功 在cmd 命令行中输入 <strong>sqlit3</strong> 回车。如果安装成功出现会入下图所示：<br> <img src="4.png"></p>
</li>
<li><p>SQLiteStudio 可视化工具<br> 数据库用命令行操作还是不方便，<strong>SQLiteStudio</strong> 是开源，且支持多平台的一个 <strong>sqlite</strong> 可视化软件。<br> 下载地址： <a href="https://sqlitestudio.pl/">https://sqlitestudio.pl/</a><br> 解压文件，找到 <strong>SQLiteStudio.exe</strong> 双击打开，初次加载，需要选择语言，找到中文即可：<br> <img src="5.png"></p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>建库<br>利用 <strong>SQLiteStudio</strong> 新建一个数据库。 Database –&gt; Add a database :<br><img src="6.png"><br>1 是新建，2是打开。 新建的时候，选好文件夹，然后输入数据库的名称就行了。因为我之前建立了，就直接选择打开。<br><img src="7.png"><br>点击测试连接，出现绿色对号。说明连接正常。然后点击 OK。<br><img src="8.png"></li>
<li>建表<br>在 <strong>test.db</strong> 里面，我已经建好了一个 <strong>user</strong> 表格，有 <strong>id</strong> 、<strong>name</strong> 、 <strong>password</strong> 还有 <strong>create_time</strong> 四个字段。你可以用工具创建，也<br>可以手动创建。表的SQL语句：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE user (</span><br><span class="line">    id          STRING (256) PRIMARY KEY</span><br><span class="line">                             UNIQUE</span><br><span class="line">                             NOT NULL,</span><br><span class="line">    name        STRING (64)  NOT NULL,</span><br><span class="line">    password    STRING (128) NOT NULL,</span><br><span class="line">    create_time DATETIME     NOT NULL</span><br><span class="line">                             DEFAULT (datetime(&#x27;now&#x27;, &#x27;localtime&#x27;) ) </span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li><p>创建项目<br>建立一个文件夹，然后 cmd 命令 初始化:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装依赖<br>用的基础的 <strong>express</strong> 创建 Server, 然后用 <strong>sqlite3</strong>库来操作数据库。用 <strong>uuid</strong> 来生成随机的id。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i express sqlite3 uuid --save</span><br></pre></td></tr></table></figure>
<p>package.json内容如下：<br><img src="9.png"> </p>
</li>
<li><p>代码使用 sqlite3<br>api 简介：<br><img src="10.png"></p>
<ol>
<li><p>代码打开数据库</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sqlite3 = <span class="built_in">require</span>(<span class="string">&quot;sqlite3&quot;</span>).verbose()</span><br><span class="line"><span class="comment">// sqlites数据库地址</span></span><br><span class="line"><span class="keyword">let</span> sqliteDbPath = <span class="string">&quot;D:\\01_Software\\Program File\\sqlite3\\DB\\test.db&quot;</span></span><br><span class="line"><span class="comment">// 打开sqlites数据库</span></span><br><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> sqlite3.Database(sqliteDbPath)</span><br></pre></td></tr></table></figure>
</li>
<li><p>新增用户</p>
<blockquote>
<p>post的请求时，从 <strong>request.body</strong> 中获取请求数据，需要配置一下</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 express 应用</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));<span class="comment">//添加通用的JSON和URL编码的解析器作为顶级中间件，该中间件将解析所有传入请求的主体。</span></span><br><span class="line">app.use(express.json());</span><br></pre></td></tr></table></figure>
<p>如果你的express的版本不是4.x及以上 那么需要用到 <strong>body-parser</strong> 库来代替 <strong>express</strong>。</p>
</blockquote>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParse = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 express 应用</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(bodyParse.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;));<span class="comment">//添加通用的JSON和URL编码的解析器作为顶级中间件，该中间件将解析所有传入请求的主体。</span></span><br><span class="line">app.use(bodyParse.json());</span><br></pre></td></tr></table></figure>
<p> 新增用户的代码</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增接口</span></span><br><span class="line"><span class="keyword">const</span> addUser = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> param =  req.body;</span><br><span class="line">    <span class="keyword">const</span> name = param.name;</span><br><span class="line">    <span class="keyword">const</span> password = param.password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> uid = uuid()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> add_sql = <span class="string">`insert into user (id , name ,password ) values(?,?,?)`</span></span><br><span class="line">    db.run(add_sql,[uid,name,password],<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                <span class="attr">msg</span>:<span class="string">&#x27;插入失败&#x27;</span>,</span><br><span class="line">                <span class="attr">ret</span>:<span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res.send(&#123;</span><br><span class="line">            <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;插入成功&#x27;</span>,</span><br><span class="line">            <span class="attr">ret</span>:<span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p> 上述代码是从 <strong>request.body</strong> 获取提交的用户名 <strong>name</strong> 和密码 <strong>password</strong>，然后利用 <strong>uuid</strong> 生成一个 <strong>id</strong>，之后写了一个插入的sql<br> 语句 <strong>add_sql</strong>。 然后用到了 <strong>sqlite3</strong> 的 <strong>run</strong> 方法来执行sql语句。代码很简单都是基本的插入语句。<br> 启动应用，利用<strong>postman</strong> 测试一下：<br> <img src="11.png"><br> 结果返回插入成功，同时刷新数据库，能看到插入的最新的一条数据。</p>
</li>
<li><p>修改用户<br> 修改的逻辑是根据用户的 <strong>id</strong> 对用户名和密码进行修改。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新</span></span><br><span class="line"><span class="keyword">const</span> updateUser = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> param =  req.body;</span><br><span class="line">    <span class="keyword">const</span> password = param.password;</span><br><span class="line">    <span class="keyword">const</span> name = param.name;</span><br><span class="line">    <span class="keyword">const</span> id = param.id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> update_sql = <span class="string">`update user set name=?, password = ? where id = ?`</span>;</span><br><span class="line">    db.run(update_sql,[name,password,id],<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                <span class="attr">msg</span>:<span class="string">&#x27;更新失败&#x27;</span>,</span><br><span class="line">                <span class="attr">ret</span>:<span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span>  data = &#123;</span><br><span class="line">            <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">            <span class="attr">ret</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">msg</span>:<span class="string">&#x27;更新成功&#x27;</span></span><br><span class="line">        &#125; ;</span><br><span class="line"></span><br><span class="line">        res.send(data)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 测试结果如下：<br> <img src="12.png"></p>
</li>
<li><p>查询用户<br>查询全部数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询全部数据</span></span><br><span class="line"><span class="keyword">const</span> getAll = <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    db.all(<span class="string">`select * from user order by create_time desc  `</span>,<span class="function"><span class="keyword">function</span> (<span class="params">err,row</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.send(&#123;</span><br><span class="line">                <span class="attr">msg</span>:<span class="string">&#x27;查询失败&#x27;</span>,</span><br><span class="line">                <span class="attr">ret</span>:<span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> data = &#123;</span><br><span class="line">                <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">                <span class="attr">data</span>:row,</span><br><span class="line">                <span class="attr">ret</span>:<span class="literal">true</span>,</span><br><span class="line">                <span class="attr">msg</span>:<span class="string">&#x27;查询成功&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// console.log(data)</span></span><br><span class="line">        res.send(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="13.png"></p>
</li>
<li><p>删除用户<br>根据用户 <strong>id</strong> 删除用户。</p>
<pre><code class="js">    //删除
    const delUser = function(req,res)&#123;
        const param = req.query || req.params ;
        const id = param.id;
        const del_sql =    `delete from user where id = ?`;
        db.run(del_sql,[id],function (err) &#123;
            if(err)&#123;
                res.send(&#123;
                    msg:&#39;删除失败&#39;,
                    ret:false
                &#125;)
            &#125;
    
            res.send(&#123;
                code:200,
                ret:true,
                msg:&#39;删除成功&#39;
            &#125;)
        &#125;)
    &#125;
</code></pre>
<p>结果如下：<br><img src="14.png"> </p>
</li>
</ol>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>  完整代码都放到 <strong>github</strong> 上，需要的移步<a href='https://github.com/JerckyLY/node-sqlite3-server-demo' target="_blank" >node-sqlite3-server-demo</a>  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  总体实现还是挺简单的，也没什么复杂的 SQL 语句。部署的时候，可以把 <strong>Node</strong> 安装为 window服务，就不用担心客户那边服务器关机了。</p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-yvqgtVFA" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-yvqgtVFA"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "大鱼",
              author: "周深/郭沁",
              url: "https://freetyst.nf.migu.cn/public/product5th/product27/2018/12/21/2018%E5%B9%B410%E6%9C%8819%E6%97%A516%E7%82%B923%E5%88%86%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E6%A2%A6%E5%93%8D%E5%BC%BA%E9%9F%B3186%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/6404689Z0HE.mp3?key=b74e16bf79b5983a&Tim=1616640844447&channelid=00&msisdn=b30efb370c4f44fdb04710eaad359cd9&CI=6404689Z0HE2600913000000634056&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/0216/1135/AM9e357dde4ae7a59634b1ea6ba2c077ab.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>


]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>Sqlite3</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium系列(6)--点线面缓冲区</title>
    <url>/2021/03/23/Cesium%E5%85%A5%E9%97%A8-6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cesium点线面缓冲区实现"><a href="#Cesium点线面缓冲区实现" class="headerlink" title="Cesium点线面缓冲区实现"></a><center>Cesium点线面缓冲区实现<center/></h2><p>上篇文章主要展示了我最近封装的一些常用工具，接下来几篇文章主要介绍相关功能的实现。这篇文章就介绍一下关于三维缓冲区的实现原理。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>其实从事 Webgis 相关的道友都用过或者听过 <strong>turf.js</strong> 这个前端 <strong>GIS</strong> <strong>javascript</strong>分析库 (什么？没听过？ 道友，最近游戏红尘了吧，哈哈<br>~), <a href='https://turfjs.fenxianglu.cn/category/' target="_blank" >中文文档地址</a>。<strong>turf.js</strong>  提供了很多分析方法，具体我就不展开说了，一个是我了解的也不是很清楚，另一个就是人家写的很详细<br>了，就不班门弄斧了。<br>三维缓冲区和二维缓冲区实现方式是一样的，都是基于 <strong>turf.js</strong> 的 <strong>buffer</strong> 方法，传入相关的参数，然后将生成的 <strong>Feature</strong> 展示就行了。</p>
<ul>
<li>buffer 方法<br><img src="1.png"></li>
<li>buffer 使用示例<br><img src="2.png"></li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>参数很简单，一个是要缓冲的基础几何对象，一个是缓冲半径，默认是千米。基本的绘制交互就不说了，核心的代码如下：</p>
<ul>
<li>点缓冲区<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建点缓冲区</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CesiumBufferUtil.prototype.createPointBuffer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//添加点</span></span><br><span class="line">  <span class="built_in">this</span>.addPoint()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//添加点的缓冲区</span></span><br><span class="line">  <span class="keyword">const</span> coordinate = <span class="built_in">this</span>.cartesianToLatlng(<span class="built_in">this</span>.positions[<span class="number">0</span>]).slice(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">let</span> pointF = turf.point(coordinate)</span><br><span class="line">  <span class="keyword">let</span> buffered = turf.buffer(pointF, <span class="built_in">this</span>.radius)</span><br><span class="line">  <span class="keyword">let</span> coordinates = buffered.geometry.coordinates;</span><br><span class="line">  <span class="keyword">let</span> points = coordinates[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> degreesArray = <span class="built_in">this</span>.pointsToDegreesArray(points);</span><br><span class="line">  <span class="built_in">this</span>.createBuffer(Cesium.Cartesian3.fromDegreesArray(degreesArray))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>线缓冲区<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建线缓冲区</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CesiumBufferUtil.prototype.createLineBuffer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> points = <span class="built_in">this</span>.getLngLats(); <span class="comment">// 坐标数组</span></span><br><span class="line">  <span class="keyword">var</span> polylineF = turf.lineString(points);</span><br><span class="line">  <span class="keyword">var</span> bufferd = turf.buffer(polylineF, <span class="built_in">this</span>.radius);</span><br><span class="line">  <span class="keyword">var</span> coordinates = bufferd.geometry.coordinates;</span><br><span class="line">  points = coordinates[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">var</span> degreesArray = <span class="built_in">this</span>.pointsToDegreesArray(points)</span><br><span class="line">  <span class="built_in">this</span>.createBuffer(Cesium.Cartesian3.fromDegreesArray(degreesArray))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>面缓冲区<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多边形缓冲区</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CesiumBufferUtil.prototype.createPolygonBuffer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> points = <span class="built_in">this</span>.getLngLats(); <span class="comment">// 坐标数组</span></span><br><span class="line">  points.push(points[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">var</span> polygonF = turf.polygon([points]);</span><br><span class="line">  <span class="keyword">var</span> bufferd = turf.buffer(polygonF, <span class="built_in">this</span>.radius);</span><br><span class="line">  <span class="keyword">var</span> coordinates = bufferd.geometry.coordinates;</span><br><span class="line">  points = coordinates[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">var</span> degreesArray = <span class="built_in">this</span>.pointsToDegreesArray(points)</span><br><span class="line">  <span class="built_in">this</span>.createBuffer(Cesium.Cartesian3.fromDegreesArray(degreesArray))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>通用缓冲区生成函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成缓冲区</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>array  坐标数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CesiumBufferUtil.prototype.createBuffer = <span class="function"><span class="keyword">function</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> bufferPolygon = <span class="built_in">this</span>.viewer.entities.add(&#123;</span><br><span class="line">    <span class="attr">polygon</span>: &#123;</span><br><span class="line">      <span class="attr">hierarchy</span>: <span class="keyword">new</span> Cesium.PolygonHierarchy(array),</span><br><span class="line">      <span class="attr">material</span>: Cesium.Color.RED.withAlpha(<span class="number">0.6</span>),</span><br><span class="line">      <span class="attr">classificationType</span>: Cesium.ClassificationType.BOTH</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">this</span>.bufferEntities.push(bufferPolygon)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>相关方法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">       </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取经纬度坐标数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CesiumBufferUtil.prototype.getLngLats = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.positions.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = <span class="built_in">this</span>.cartesianToLatlng(<span class="built_in">this</span>.positions[i]);</span><br><span class="line">    arr.push(item.slice(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转经纬度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>cartesian </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CesiumBufferUtil.prototype.cartesianToLatlng = <span class="function"><span class="keyword">function</span> (<span class="params">cartesian</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> latlng = <span class="built_in">this</span>.viewer.scene.globe.ellipsoid.cartesianToCartographic(</span><br><span class="line">    cartesian</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">var</span> lat = Cesium.Math.toDegrees(latlng.latitude);</span><br><span class="line">  <span class="keyword">var</span> lng = Cesium.Math.toDegrees(latlng.longitude);</span><br><span class="line">  <span class="keyword">var</span> height = latlng.height</span><br><span class="line">  <span class="keyword">return</span> [lng, lat, height];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组转一维数组</span></span><br><span class="line">CesiumBufferUtil.prototype.pointsToDegreesArray = <span class="function"><span class="keyword">function</span> (<span class="params">points</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> degreesArray = [];</span><br><span class="line">  points.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    degreesArray.push(item[<span class="number">0</span>]);</span><br><span class="line">    degreesArray.push(item[<span class="number">1</span>]);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> degreesArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>  <img src="3.png"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>  完整代码都放到 <strong>github</strong> 上，需要的移步<a href='https://github.com/JerckyLY/cesium-demo-view' target="_blank" >Cesium-demo-view</a>  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>缓冲区实现的过程很简单，没什么可多说的，需要注意的是二维三维坐标的转换，二维面的坐标数组要闭合。其他的就是正常的实现就行了。</p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-JHCmTOqf" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-JHCmTOqf"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "明天会更好",
              author: "群星",
              url: "https://freetyst.nf.migu.cn/public/product4th/product36/2019/09/1617/2019%E5%B9%B409%E6%9C%8802%E6%97%A516%E7%82%B940%E5%88%86%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E6%BB%9A%E7%9F%B3%E5%94%B1%E7%89%87%E8%AF%8D%E6%9B%B2%E9%A2%84%E7%95%991%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/63480216478.mp3?key=ee020ad0d1687cc2&Tim=1616494755978&channelid=00&msisdn=37b679460fd043d3825ba69cf3f19009&CI=634802164782600913000006049674&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/1017/1021/AS8c9ff20208cb76c25a4362d74bec3ec0.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>Cesium</category>
      </categories>
      <tags>
        <tag>cesium</tag>
        <tag>webgis</tag>
      </tags>
  </entry>
  <entry>
    <title>VueRouter原理与实现</title>
    <url>/2020/12/18/VueRouter%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="VueRouter原理与实现"><a href="#VueRouter原理与实现" class="headerlink" title="VueRouter原理与实现"></a><center>VueRouter原理与实现<center/></h2><p>我们在平常的 <code>Vue</code> 项目开发中，应该都是用过 <code>VueRouter</code> 和 <code>Vuex</code> 这两个重要的插件。今天就主要研究一下 <code>VueRouter</code> 的是原理是什么，然后自己简单实现一个基础版本的 <code>VueRouter</code>。 <a href='https://github.com/vuejs/vue-router' target="_blank" >VueRouter源码地址</a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="VueRouter的流程"><a href="#VueRouter的流程" class="headerlink" title="VueRouter的流程"></a>VueRouter的流程</h3><p> <code>VueRouter</code> 源码中工作流程大致以下几步：</p>
<blockquote>
<ol>
<li>url 发生变化</li>
<li>触发 url 监听事件</li>
<li>赋值 router 中的 current变量</li>
<li>监听 current 变量发生变化。</li>
<li>获取 current 对应的组件 </li>
<li>渲染组件</li>
</ol>
</blockquote>
<p> 看过流程也就明白了 <code>VueRouter</code> 是 <code>Vue</code> 能实现单页面应用的核心。不同的路由切换，本质上就是不同的组件切换，最后渲染在页面上。</p>
<ul>
<li><p>url 监听事件<br><code>VueRouter</code> 的模式有两种 <code>hash</code> 和 <code>history</code>。默认是 <code>hash</code> 模式。<br>两个模式的获取值以及对应的监听事件是不是一样的：</p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="center">获取方式</th>
<th align="center">监听事件</th>
<th align="left">表示形式</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>hash</code></td>
<td align="center"><code>location.hash</code></td>
<td align="center"><code>hashchange</code></td>
<td align="left"><code> http://localhost/#/index</code></td>
</tr>
<tr>
<td align="center"><code>history</code></td>
<td align="center"><code>location.pathname</code></td>
<td align="center"><code>popstate</code></td>
<td align="left"><code>http://localhost/index</code></td>
</tr>
</tbody></table>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>明白了基本的原理之后，就可以下手了。当然只是明白原理还不够，还需要明白 <code>Vue</code> 的几个工具概念。</p>
<h3 id="前置技术介绍"><a href="#前置技术介绍" class="headerlink" title="前置技术介绍"></a>前置技术介绍</h3><p>主要介绍使用的几个主要的技术, <code>Vue</code> 插件， <code>Vue</code> 混入 (mixin)， 渲染函数。对这些都熟悉的大佬可以跳过。 </p>
<h4 id="Vue-插件"><a href="#Vue-插件" class="headerlink" title="Vue 插件"></a><code>Vue</code> 插件</h4></li>
<li><p>简介<br> 前面说过 <code>VueRouter</code> 是 <code>Vue</code> 的核心插件之一。那我们就得知道什么是 <code>Vue</code> 插件，在 <code>Vue</code> 官方文档中有相关介绍：具体介绍移步 <a href='https://cn.vuejs.org/v2/guide/plugins.html' target="_blank" >这里</a>   </p>
<blockquote>
<p>插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：  </p>
<ol>
<li>添加全局方法或者 property。如：<code>vue-custom-element</code></li>
<li>添加全局资源：指令/过滤器/过渡等。如 <code>vue-touch</code></li>
<li>通过全局混入来添加一些组件选项。如 <code>vue-router</code></li>
<li>添加 Vue 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现。</li>
<li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 <code>vue-router</code></li>
</ol>
</blockquote>
</li>
<li><p>开发插件<br><code>Vue</code> 插件应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">  Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  Vue.directive(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件选项</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">methodOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用插件<br> 通过全局方法 <code>Vue.use()</code> 使用插件。它需要在你调用 <code>new Vue()</code> 启动应用之前完成：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用 MyPlugin.install(Vue)</span></span><br><span class="line">Vue.use(MyPlugin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...组件选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="Vue-混入-mixin"><a href="#Vue-混入-mixin" class="headerlink" title="Vue 混入 (mixin)"></a><code>Vue</code> 混入 (mixin)</h4></li>
<li><p>简介<br>在上面的 <code>Vue</code> 插件开发中，<code>install</code> 里面有个 <code>vue.mixin</code> 方法。这个是 <code>Vue</code> 提供的一个全局Api , 通过混入，可以把方法和变量混入 <code>Vue</code>的示例中，具体看文档 <a href='https://cn.vuejs.org/v2/guide/mixins.html' target="_blank" >这里</a></p>
</li>
<li><p>使用<br>混入的对象以及属性的内容是和 <code>Vue</code> 组件一致，可以混入数据，方法，甚至是生命周期。而对于同名的属性和方法，<code>Vue</code> 会进行合并，后出现的属性会覆盖之前的属性和方法。  全局混入会影响每一个之后创建的 <code>Vue</code> 实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span>(<span class="params">vue</span>) </span>&#123;</span><br><span class="line">    vue.mixin(&#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">globalMixinData</span>: <span class="string">&#x27;这是 mixin 混入数据&#x27;</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 混入生命周期</span></span><br><span class="line">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>) </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;I am globalMixin created&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line"> <span class="comment">//使用拆件</span></span><br><span class="line"> Vue.use(MyPlugin)</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line"> &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>在 <code>main.js</code> 中引入 <code>MyPlugin</code> 然后在 <code>App.vue</code> 中引用 <code>&#123;&#123;globalMixinData&#125;&#125;</code> 即可看到<br><img src="1.png"><br>图中执行两次 <code>console.log(I am globalMixin created)</code>  是因为 <code>new Vue</code> 和 <code>App.vue</code> 都会执行一次生命周期。 通过 <code>console.log(this)</code> 是能看到哪个执行的生命周期。</p>
<h4 id="渲染函数-h-createElement"><a href="#渲染函数-h-createElement" class="headerlink" title="渲染函数 (h == createElement)"></a>渲染函数 (h == createElement)</h4></li>
<li><p>简介</p>
<p>渲染函数的由来是因为 <code>Vue</code> 使用了 <strong>虚拟DOM</strong>，更新操作 <strong>虚拟DOM</strong> 比操作真正的 <code>DOM</code> 要更快，而且更节省资源。 渲染函数  <a href='https://cn.vuejs.org/v2/guide/render-function.html#createElement-%E5%8F%82%E6%95%B0' target="_blank" >createElement</a>  实际上返回的是一个 <code>VNode</code> 虚拟节点，最后 <code>Vue</code> 再生成真实的 <code>DOM</code> 显示在页面上。</p>
</li>
<li><p>参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @returns &#123;VNode&#125;</span></span><br><span class="line">createElement(</span><br><span class="line">  <span class="comment">// &#123;String | Object | Function&#125;</span></span><br><span class="line">  <span class="comment">// 一个 HTML 标签名、组件选项对象，或者</span></span><br><span class="line">  <span class="comment">// resolve 了上述任何一种的一个 async 函数。必填项。</span></span><br><span class="line">  <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;Object&#125;</span></span><br><span class="line">  <span class="comment">// 一个与模板中 attribute 对应的数据对象。可选。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// (详情见下一节)</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;String | Array&#125;</span></span><br><span class="line">  <span class="comment">// 子级虚拟节点 (VNodes)，由 `createElement()` 构建而成，</span></span><br><span class="line">  <span class="comment">// 也可以使用字符串来生成“文本虚拟节点”。可选。</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">&#x27;先写一些文字&#x27;</span>,</span><br><span class="line">    createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;一则头条&#x27;</span>),</span><br><span class="line">    createElement(MyComponent, &#123;</span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">someProp</span>: <span class="string">&#x27;foobar&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>第二个参数内容部分如下： <a href='https://cn.vuejs.org/v2/guide/render-function.html#%E6%B7%B1%E5%85%A5%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1' target="_blank" >详细参数</a> 。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">      <span class="comment">// 普通的 HTML attribute</span></span><br><span class="line">      <span class="attr">attrs</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 组件 prop</span></span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">myProp</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 事件监听器在 `on` 内，</span></span><br><span class="line">      <span class="comment">// 但不再支持如 `v-on:keyup.enter` 这样的修饰器。</span></span><br><span class="line">      <span class="comment">// 需要在处理函数中手动检查 keyCode。</span></span><br><span class="line">      <span class="attr">on</span>: &#123;</span><br><span class="line">        <span class="attr">click</span>: <span class="built_in">this</span>.clickHandler</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 仅用于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">      <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例<br>比如创建一个全局组件 <code>viewer</code> 里面的内容为 <code>&lt;div id=&#39;viewers&#39;&gt;我是div&lt;/div&gt;</code>, 在 <code>main.js</code> 中添加代码如下：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;viewer&#x27;</span>,&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> tag = <span class="string">&#x27;div&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> config = &#123;<span class="attr">attrs</span>:&#123;<span class="attr">id</span>:<span class="string">&#x27;viewers&#x27;</span>&#125;&#125;</span><br><span class="line">    <span class="keyword">return</span> h(tag,config,<span class="string">&#x27;我是div&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>结果如下<br><img src="2.png"></p>
<h3 id="基础版实现"><a href="#基础版实现" class="headerlink" title="基础版实现"></a>基础版实现</h3><p>了解前面的知识之后，就能真正开始写了。</p>
</li>
<li><p>history 路径监听类<br>因为 <code>VueRouter</code> 是分 <code>hash</code> 和 <code>history</code> 两种模式，那么我们分别创建两种类：<br><code>HashHistory</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hash类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashHistory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.current = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.initListener()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initListener ()&#123;</span><br><span class="line">    location.hash ? <span class="string">&#x27;&#x27;</span> : location.hash = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 页面加载的时候初始化，存储hash值到history的current上，并且去掉开头的#</span></span><br><span class="line">      <span class="built_in">this</span>.current = location.hash.slice(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// hash改变的时候更新history的current</span></span><br><span class="line">      <span class="built_in">this</span>.current = location.hash.slice(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HTML5History</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * history模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTML5History</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.current = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.initListener()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initListener ()&#123;</span><br><span class="line">    <span class="comment">// 如果url没有pathname，给一个默认的根目录pathname</span></span><br><span class="line">    location.pathname ? <span class="string">&#x27;&#x27;</span> : location.pathname = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 页面加载的时候初始化，存储pathname值到history的current上</span></span><br><span class="line">      <span class="built_in">this</span>.current = location.pathname;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;popstate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// pathname改变的时候更新history的current</span></span><br><span class="line">      <span class="built_in">this</span>.current = location.pathname;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这两个类相同，主要做了两件事， 一是记录当前的 路径地址 <code>current</code> ，一个是创建监听路径变化事件。 <code>initListener()</code>。只是两个监听的事件名不一样。</p>
</li>
<li><p><code>CustomRouter</code> 路由类 </p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义路由类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomRouter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.mode = options.mode || <span class="string">&#x27;hash&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.routers = options.routers || [];</span><br><span class="line">    <span class="comment">// 将数组结构的routes转化成一个更好查找的对象</span></span><br><span class="line">    <span class="built_in">this</span>.routesMap = <span class="built_in">this</span>.mapRoutes(<span class="built_in">this</span>.routers);</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化history</span></span><br><span class="line">  <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.mode === <span class="string">&#x27;hash&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.history = <span class="keyword">new</span> HashHistory()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.history = <span class="keyword">new</span> HTML5History()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  将 [&#123;path: &#x27;/&#x27;, component: Hello&#125;]</span></span><br><span class="line"><span class="comment">  转化为 &#123;&#x27;/&#x27;: Hello&#125; 方便查找</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="title">mapRoutes</span>(<span class="params">routes</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> routes.reduce(<span class="function">(<span class="params">res, current</span>) =&gt;</span> &#123;</span><br><span class="line">      res[current.path] = current.component;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;, &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <code>CustomRouter</code> 有两个参数：1. <code>mode</code> 类型，默认为 <code>hash</code> 2. <code>routers</code> 路由数组。因为是以插件的形式给 <code>Vue</code> 因此，还需要提供一个 <code>install</code> 方法</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加install属性，用来执行插件</span></span><br><span class="line">CustomRouter.install = <span class="function"><span class="keyword">function</span> (<span class="params">vue</span>) </span>&#123;</span><br><span class="line">  vue.mixin(&#123;</span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 获取new Vue时传入的参数</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.$options &amp;&amp; <span class="built_in">this</span>.$options.router) &#123;</span><br><span class="line">        <span class="built_in">this</span>._root = <span class="built_in">this</span>;</span><br><span class="line">        <span class="built_in">this</span>._router = <span class="built_in">this</span>.$options.router;</span><br><span class="line">        <span class="comment">// 监听current, defineReactive(obj, key, val)不传第三个参数，第三个参数默认是obj[key]</span></span><br><span class="line">        <span class="comment">// 第三个参数传了也会被监听，效果相当于，第一个参数的子级</span></span><br><span class="line">        vue.util.defineReactive(<span class="built_in">this</span>, <span class="string">&#x27;current&#x27;</span>, <span class="built_in">this</span>._router.history);</span><br><span class="line">        <span class="comment">// vue.set(this, &#x27;current&#x27;, this._router.history);</span></span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不是根组件，就往上找</span></span><br><span class="line">        <span class="built_in">this</span>._root = <span class="built_in">this</span>.$parent &amp;&amp;  <span class="built_in">this</span>.$parent._root || <span class="built_in">this</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 暴露一个只读的$router</span></span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, <span class="string">&#x27;$router&#x27;</span>, &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">this</span>._root._router;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册 router-link组件，进行路由跳转</span></span><br><span class="line">  vue.component(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;to&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> tag = <span class="string">&#x27;a&#x27;</span> <span class="comment">// a 标签</span></span><br><span class="line">      <span class="keyword">const</span> config = &#123;</span><br><span class="line">        <span class="attr">attrs</span>:&#123;</span><br><span class="line">          <span class="attr">href</span>:<span class="built_in">this</span>._self._root._router.mode ==<span class="string">&#x27;hash&#x27;</span>? <span class="string">&#x27;#&#x27;</span>+<span class="built_in">this</span>.to: <span class="built_in">this</span>.to  <span class="comment">// 根据路由mode 设置不同的 href 属性</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> h(tag,config,<span class="built_in">this</span>.$slots.default);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册router-view组件，这个组件根据current不同会render不同的组件</span></span><br><span class="line">  vue.component(<span class="string">&#x27;router-view&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">      <span class="comment">//获取当前的path路径</span></span><br><span class="line">      <span class="keyword">const</span> current = <span class="built_in">this</span>._self._root._router.history.current;</span><br><span class="line">      <span class="comment">//获取转换后的路由对象 &#123;`path`:`component`&#125; 组合</span></span><br><span class="line">      <span class="keyword">const</span> routesMap = <span class="built_in">this</span>._self._root._router.routesMap;</span><br><span class="line">      <span class="comment">//根据path 获取对应的组件</span></span><br><span class="line">      <span class="keyword">const</span> component = routesMap[current];</span><br><span class="line">      <span class="comment">//渲染组件</span></span><br><span class="line">      <span class="keyword">return</span> h(component);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 代码中使用了 <code>Vue.mixin</code> 在生命周期 <code>beforeCreate</code> 来混入路由对象，同时暴露出一个 <code>$router</code> 来获取路由对象，然后利用了 <strong>渲染函数</strong> 注册了两个全局组件 <code>router-view</code> 和 <code>router-link</code></p>
<blockquote>
<p>有同学会注意到有个 <code>vue.util.defineReactive(this, &#39;current&#39;, this._router.history);</code> 。这行代码主要是让 <code>current</code> 属性为响应式。 <code>Vue.util</code> 是没有在文档写出的。源码中可以看到定义<br> <img src="3.png"></p>
</blockquote>
<h3 id="Demo使用"><a href="#Demo使用" class="headerlink" title="Demo使用"></a>Demo使用</h3><p>有了自定义路由之后，就可以使用了。</p>
</li>
<li><p>先写两个路由数组，定义路由。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> CustomRouter <span class="keyword">from</span> <span class="string">&quot;../customRouter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;../components/HelloWorld.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">&#x27;../components/Test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用路由插件</span></span><br><span class="line">Vue.use(CustomRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  routers = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: HelloWorld</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/test&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Test</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router  = <span class="keyword">new</span> CustomRouter(&#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;history&#x27;</span>, <span class="comment">//默认为 hash</span></span><br><span class="line">    routers</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>main.js</code> 引用，然后在 <code>App.vue</code> 使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;router-link-box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/test&quot;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>hash</code> 模式结果：<br> <img src="router1.gif"></p>
</li>
<li><p><code>history</code> 模式结果：<br> <img src="router2.gif"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>OK，总算是写完了。 <code>VueRouter</code> 的核心原理如果仔细看完上面的，应该是明白的。上面的代码可以在 <strong>github</strong> 获取。<a href='https://github.com/JerckyLY/VueCustomRouterDemo' target="_blank" >地址</a> 。</p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-YNWhUCBg" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-YNWhUCBg"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "海底",
              author: "一支榴莲",
              url: "https:////freetyst.nf.migu.cn/public/product9th/product41/2020/08/1910/2020%E5%B9%B408%E6%9C%8818%E6%97%A512%E7%82%B945%E5%88%86%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E5%92%8C%E8%A3%95%E7%BD%91%E7%BB%9C1%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/69535601315104001.mp3?key=c75dd0ba83980f82&Tim=1608360823894&channelid=00&msisdn=2d41260208a347d9a9f986db9a16f12f&CI=695356013152600919000000720371&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/0922/1821/AS49bf94679ae7c0d49ea304e7f18e4cf3.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Web前端</tag>
        <tag>Vue</tag>
        <tag>VueRouter</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue响应式原理 Vue2--Vue3对比</title>
    <url>/2020/12/15/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue响应式原理-Vue2和Vue3"><a href="#Vue响应式原理-Vue2和Vue3" class="headerlink" title="Vue响应式原理 Vue2和Vue3"></a><center>Vue响应式原理 Vue2和Vue3<center/></h2><p><code>Vue</code> 作为前端三大主流框架之一，它的数据驱动视图无疑是重大特点之一。9月18号尤大发布了 <code>Vue3</code>,它比上一版本运行更快，体积更小，也增加了 <code>Composition API</code> 组合式编程，支持 <code>typeScript</code>，优化了 <code>DOM Diff</code> 算法等一系列的优化。更加的趋向于 <code>函数式编程</code>。<br><code>Vue</code> 的知识点不少，今天就主要介绍响应式原理，看看 <code>Vue2</code> 和 <code>Vue3</code> 在这方面的区别。</p>
<h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><p> 响应式或者说数据驱动视图的关键点在于我们如何知道数据发生了变化，即数据什么时候被读取或者被修改了。而这些， <code>JavaScript</code> 提供了 <a href='https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty' target="_blank" >Object.defineProperty</a>   方法，改方法能很轻松的达到观察数据变化的目的。</p>
<h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><ul>
<li>让 <code>Object</code> 类型数据变得可观测<br> 借助 <code>Object.defineProperty</code> 很容易实现，代码如下： <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> apple = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> val = <span class="number">5</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(apple, <span class="string">&#x27;price&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;price属性被读取了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;price属性被修改了&#x27;</span>)</span><br><span class="line">    val = newVal</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;price属性修改后的值为&#x27;</span>,newVal)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(apple.price)  <span class="comment">// get 获取</span></span><br><span class="line">apple.price = <span class="number">8</span>           <span class="comment">// set 修改</span></span><br></pre></td></tr></table></figure>
 代码中定义了一个 <code>apple</code> 对象，通过 <code>Object.defineProperty</code> 定义了一个 <code>price</code> 属性，然后对该属性的 <code>get</code> , <code>set</code> 方法进行拦截。运行结果如下：<br> <img src="1.png"><br> 可以看到 <code>apple</code> 对象的读写操作都主动告知了我们，那这个 <code>apple</code> 对象就是可观测的。</li>
<li>不足<br>由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的。    <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// `vm.a` 是响应式的</span></span><br><span class="line"></span><br><span class="line">vm.b = <span class="number">2</span></span><br><span class="line"><span class="comment">// `vm.b` 是非响应式的</span></span><br></pre></td></tr></table></figure>
 对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 property。例如： <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.set(vm.someObject, <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="Array数据变化监测"><a href="#Array数据变化监测" class="headerlink" title="Array数据变化监测"></a>Array数据变化监测</h3><p>  由于 <code>Array</code> 类型是无法使用 <code>Object.defineProperty</code>, 因此对于 <code>Array</code> 数据类型，需要设计一套另外的变化检测机制。</p>
<ul>
<li><p>getter<br>由于我们在平常的 <code>Vue</code> 项目开发中，都是在组件中的 <code>data</code> 中定义数组的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data ()&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">arr</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以，对于 <code>getter</code> 我们想要获取 <code>arr</code> 必须是先在 <code>data</code> 这个 <code>Object</code>类型的数据获取，那就必定触发 <code>arr</code> 的 <code>getter</code> 。因此 <code>Array</code> 类型的数据读取操作还是从 <code>getter</code> 中发出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="attr">arr</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> vals = data[<span class="string">&#x27;arr&#x27;</span>]</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">&#x27;arr&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;arr属性被读取了 data&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> vals</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;arr属性被修改了 data&#x27;</span>)</span><br><span class="line">    vals = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.arr[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="3.png"></p>
</li>
<li><p>setter<br>对于 <code>Object</code> 数据类型，数据的操作可以从 <code>setter</code> 中得知，但是 <code>Array</code> 是没有的。不过 <code>Array</code> 提供了一些方法来操作 <code>Array</code>。 操作了 <code>Array</code> 那数据就一定是发生了变化的，那我们可以把数组的几个操作方法都重新写一遍，在不改变原有功能的基础上，增加一些其他的操作，不就可以达到目的了。这个操作可以称为数组拦截器。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr.push(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">Array</span>.prototype.newPush = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;arr被修改了&#x27;</span>)</span><br><span class="line">  <span class="built_in">this</span>.push(val)</span><br><span class="line">&#125;</span><br><span class="line">arr.newPush(<span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是尤大在 <code>Vue</code> 中处理数组监听修改操作的方式，是不是很厉害。数组修改拦截器：<br><img src="2.png"><br>在 <code>Array</code> 原型中能改变数组内容的方法有7个，分别是 <code>pop</code> , <code>push</code>, <code>shift</code>, <code>unshift</code>, <code>splice</code>, <code>sort</code>, <code>reverse</code>。源码中的拦截器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [</span><br><span class="line">  <span class="string">&#x27;push&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;shift&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;unshift&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;splice&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sort&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;reverse&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Intercept mutating methods and emit events</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">methodsToPatch.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// cache original method</span></span><br><span class="line">  <span class="keyword">const</span> original = arrayProto[method]</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(arrayMethods, method, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">mutator</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> result = original.apply(<span class="built_in">this</span>, args)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;arr属性被修改了&#x27;</span>, method)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>写好了操作拦截器之后，还需要在数组对象和 <code>Array.Prototype</code> 之间挂载，使拦截器生效。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">protoAugment</span> (<span class="params">target, src</span>) </span>&#123;</span><br><span class="line">  target.__proto__ = src</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Augment a target Object or Array by defining</span></span><br><span class="line"><span class="comment"> * hidden properties.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyAugment</span> (<span class="params">target, src, keys</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(target,key,&#123;</span><br><span class="line">      <span class="attr">value</span>:src[key],</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">//拦截器挂载</span></span><br><span class="line"><span class="keyword">const</span> arrayKeys = <span class="built_in">Object</span>.getOwnPropertyNames(arrayMethods)</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;__proto__&#x27;</span> <span class="keyword">in</span> &#123;&#125;)&#123;  <span class="comment">// 浏览器是否支持 __proto__</span></span><br><span class="line">  protoAugment(arr, arrayMethods)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  copyAugment(arr, arrayMethods, arrayKeys)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr.push(<span class="number">0</span>)</span><br><span class="line">arr.pop(<span class="number">0</span>)</span><br><span class="line">arr.shift(-<span class="number">1</span>)</span><br><span class="line">arr.unshift(-<span class="number">1</span>)</span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">arr.sort()    </span><br><span class="line">arr.reverse()</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>
<p>代码中 <code>&#39;__proto__&#39; in &#123;&#125;</code> 这个是用来判断浏览器是否支持 <code>__proto__</code> 属性，如果支持就直接使用，不支持就循环定义几种操作方法。<br><img src="4.png"></p>
<p>这样我们就可以得知 <code>Array</code>数据在什么时候改变了。</p>
</li>
<li><p>不足<br> 当我们利用索引直接操作一个数组项 <code>vm.items[indexOfItem] = newValue</code> 或者 修改数组的长度时 <code>vm.items.length = newLength</code> 都是无法达到监测的。<br> 不过可以使用 <code>Vue.set</code> 和 <code>Array.splice</code> 实现监测功能。</p>
</li>
</ul>
<h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><p>  在 <code>Vue3</code>中，引入了ES6中的 <a href='https://es6.ruanyifeng.com/?search=Object&x=0&y=0#docs/proxy' target="_blank" >Proxy</a> 来实现对数据的监听。<br>  <code>Proxy</code> 可以理解为在目标对象之前架设了一层拦截，即拦截器，通过拦截器，来得知<code>getter</code> 和 <code>setter</code> 在何时触发。<br>  区别于 <code>Object.defineProperty</code>针对于对象的属性操作，<code>Proxy</code> 是直接操作对象的。因此，不必像 <code>Vue2</code> 那种需要分 <code>Object</code> 和 <code>Array</code> 两种类型分别处理。直接使用 <code>Proxy</code>就可以达到对两种数据的监听。</p>
<ul>
<li><p><code>Object</code> 类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> data = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> state = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;</span><br><span class="line">   <span class="function"><span class="title">get</span>(<span class="params">obj,key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;data &#x27;</span>+key+<span class="string">&#x27;属性被获取了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> obj[key]</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="function"><span class="title">set</span>(<span class="params">obj,key,newVal</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;data &#x27;</span>+key+<span class="string">&#x27;属性被修改了&#x27;</span>)</span><br><span class="line">     obj[key] = newVal</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(state.name)</span><br><span class="line">state.age = <span class="number">21</span> </span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="5.png"></p>
</li>
<li><p><code>Array</code> 类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">3</span>,-<span class="number">4</span>,-<span class="number">5</span>]</span><br><span class="line"> <span class="keyword">let</span> state = <span class="keyword">new</span> <span class="built_in">Proxy</span>(arr,&#123;</span><br><span class="line">   <span class="function"><span class="title">get</span>(<span class="params">obj,key</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;arr &#x27;</span>+key+<span class="string">&#x27;被获取了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> obj[key]</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="function"><span class="title">set</span>(<span class="params">obj,key,newVal</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;arr &#x27;</span>+key+<span class="string">&#x27;被修改了&#x27;</span>)</span><br><span class="line">     obj[key] = newVal</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(state[<span class="number">0</span>])</span><br><span class="line">state.push(-<span class="number">6</span>)</span><br><span class="line">state[<span class="number">7</span>] = <span class="number">0</span></span><br><span class="line">state.splice(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(state)</span><br></pre></td></tr></table></figure>
<p><img src="6.png"><br>使用 <code>state[7] = 0</code> 这种方式也能直接变成响应式了。是不是很强！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内容稍微有点长，<code>Vue2</code>的响应式原理核心是用到了 <code>Objeck.defineProperty</code> 来对 <code>Object</code>类型数据监听。重写了数组中的7个操作数组本身内容的方法来监听。<code>Vue3</code> 是用 <code>Proxy</code> 来达到监听。这方面看来是 <code>Vue3</code> 是更加方便且更强大了。</p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-mvhhfHvx" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-mvhhfHvx"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "暗里着迷",
              author: "吉他的天空",
              url: "https://lc-gluttony.s3.amazonaws.com/LJltQYKflcAs/ee1dac131f1f1efe73c0.mp3/%E5%90%89%E4%BB%96%E7%9A%84%E5%A4%A9%E7%A9%BA-%E6%9A%97%E9%87%8C%E7%9D%80%E8%BF%B7.mp3",
              pic: "https://imgessl.kugou.com/stdmusic/20200605/20200605154230691765.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Web前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium系列(5)--源码编译和调试(ES6)</title>
    <url>/2020/12/10/Cesium%E5%85%A5%E9%97%A8-5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cesium源码编译和调试-ES6"><a href="#Cesium源码编译和调试-ES6" class="headerlink" title="Cesium源码编译和调试(ES6)"></a><center>Cesium源码编译和调试(ES6)<center/></h2><p>作为目前来说支持大场景，海量模型数据，LOD分级渲染的三维免费开源项目 <strong><code>Cesium</code></strong> 应该是最优选择了。 保持每个月更新一次的维护效率，加上各种社区的支持， <strong><code>Cesium</code></strong> 在未来很长一段时间内都会是最优的开源选择。   </p>
<p>对于好的开源项目，大家都是会想了解它的原理是什么，它的代码是什么样的。哪些地方值我们学习。今天就详细介绍一下怎么编译和调试源码。</p>
<h2 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h2><ul>
<li><p><code>预编译包</code> 也就是我们在官网上看的js包 <a href='https://cesium.com/cesiumjs/' target="_blank" >下载地址</a></p>
<p><img src="1.png"></p>
<p>这里面提供了打包之后的js库和示例以及文档。在这里面调试，打包会编译失败。</p>
</li>
<li><p><code>源码包</code> 源码包打包之后是可以得到预编译包。如果想修改源码，就使用这个包。获取方式有两种。</p>
<ul>
<li><code>git</code> 安装<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/CesiumGS/cesium.git</span></span><br></pre></td></tr></table></figure></li>
<li>zip包下载  <a href='https://github.com/CesiumGS/cesium/releases' target="_blank" >下载地址</a><br><img src="2.png"></li>
</ul>
</li>
</ul>
<h2 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h2><p>  下载解压源码包之后，找到根目录(package.json同级)，然后安装模块<br>   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install </span><br><span class="line"><span class="comment">// 国内较慢的道友们， 用cnpm 也可以</span></span><br><span class="line">cnpm install </span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>编译命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">npm run release <span class="comment">// [最完整的打包]</span></span><br><span class="line"><span class="comment">// 打包到Build 目录下，包括上线的运行版本，调试版本 和API文档</span></span><br><span class="line"> </span><br><span class="line">npm run makeZipFile <span class="comment">// [生成分发zip包]</span></span><br><span class="line"><span class="comment">// 打包到根目录下的 Cesium-&lt;版本号&gt;.zip ,删除不必要的开发文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打包到Build目录下的Cesium目录</span></span><br><span class="line">npm run minifyRelease <span class="comment">//[线上运行打包]</span></span><br><span class="line">npm run minify [线上运行留Debug信息打包]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包到Build目录下的CesiumUnminified目录</span></span><br><span class="line">npm run combine <span class="comment">//[不压缩并留Debug信息打包]</span></span><br><span class="line">npm run combineRelease <span class="comment">// [不压缩且不保留Debug信息打包]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行本地帮助文档，示例代码服务</span></span><br><span class="line">npm start  &lt;--port 可选端口&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行局域网内帮助文档，示例代码服务</span></span><br><span class="line">npm startPublic</span><br></pre></td></tr></table></figure></li>
<li><p>本地运行<br>在运行之前，需要先运行一下 <code>npm run minify</code> 或者上面的几个打包命令（都是比较慢3分钟左右）。因为源码包里面最初是没有 <code>Build</code> 目录的，运行这个目录是先生成一个 <code>Build</code> 目录。便于后续的本地启动。<br>然后运行 <code>npm run start</code> , 默认地址为<a href="http://localhost:8080/">http://localhost:8080/</a><br><img src="3.png"><br>点击 <code>Sandcastle</code> 就能看到内置的Demo了<br><img src="4.png"></p>
<h2 id="调试运行"><a href="#调试运行" class="headerlink" title="调试运行"></a>调试运行</h2><p>源码的文件都是在 <code>Source</code> 目录下的，所以我们在调试的时候，当然是引用 <code>Source</code> 目录下的文件来实时运行调试了。因为 <code>ES6</code> 很流行了，所以调试的方式基于 <code>ES6</code> import 导入</p>
</li>
</ul>
<ol>
<li><p>准备<br>首先在源码的根目录下建立一个文件夹 <code>Demo</code> ，然后里面建立两个文件 <code>demo.html</code> 和 <code>demo.js</code><br><img src="5.png"></p>
</li>
<li><p>编写<br><code>demo.html</code>的内容如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * @Author: Jercky </span><br><span class="line"> * @Date: 2020-12-10 11:44:14 </span><br><span class="line"> * @Last Modified by:   Jercky </span><br><span class="line"> * @Last Modified time: 2020-12-10 11:44:14 </span><br><span class="line"> */</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Use correct character set. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Tell IE to use the latest, best version. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>源码调试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;../Source/Widgets/widgets.css&quot;&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> url(../Source/Widgets/widgets.css);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-id">#cesiumContainer</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;cesiumContainer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.CESIUM_BASE_URL = <span class="string">&#x27;../Source&#x27;</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>demo.js</code>的内容如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Jercky </span></span><br><span class="line"><span class="comment"> * @Date: 2020-12-10 11:44:14 </span></span><br><span class="line"><span class="comment"> * @Last Modified by: Jercky</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2020-12-10 11:45:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Cesium <span class="keyword">from</span> <span class="string">&#x27;../../Source/Cesium.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> viewer = <span class="keyword">new</span> Cesium.Viewer(<span class="string">&#x27;cesiumContainer&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>运行<br>我用的是 <code>VsCode</code> 调试工具，有个插件 <code>Live Server</code> 很好用。 用插件打开 <code>demo.html</code> 即可在浏览器查看了<br><img src="6.png"></p>
</li>
<li><p>修改源码实时运行<br>这里面只是做一个简单的演示。在 <code>Source/Scene/View.js</code> 中 增加打印输出。<code>console.log(&#39;new Cesium View -------------Jercky&#39;)</code><br><img src="7.png"><br>运行结果：<br><img src="8.png"></p>
<h2 id="打包使用"><a href="#打包使用" class="headerlink" title="打包使用"></a>打包使用</h2><p>当自己的源码修改完成之后，运行 <code>npm run makeZipFile</code> 就能生成和官网一样的 预编译包了。这里就不再演示了。</p>
</li>
</ol>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-ZKrRoimX" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-ZKrRoimX"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "我很好(吉他版)",
              author: "刘大壮",
              url: "https://freetyst.nf.migu.cn/public/product9th/product42/2020/11/2615/2020%E5%B9%B411%E6%9C%8809%E6%97%A517%E7%82%B949%E5%88%86%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E5%90%91%E5%8D%97%E9%87%8C1%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/69921000078150841.mp3?key=54728fc3313d849a&Tim=1607569228683&channelid=00&msisdn=ebaea03448fb4d1b8bb3f811e55e85e6&CI=699210000782600919000002105660&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/1207/1049/ASc97eb9599afa7f95a65cf4b576a0ffbc.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>Cesium</category>
      </categories>
      <tags>
        <tag>cesium</tag>
        <tag>webgis</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium系列(4)--自定义Popup框</title>
    <url>/2020/10/22/Cesium%E5%85%A5%E9%97%A8-4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cesium自定义Popup框"><a href="#Cesium自定义Popup框" class="headerlink" title="Cesium自定义Popup框"></a><center>Cesium自定义Popup框<center/></h2><p>在习惯了二维的Popup框之后，也想在三维里面有个。但是Cesium并没有封装过Popup框，有的只是一个悬浮固定位置的信息框，就是这样的：</p>
<p><img src="1.png"></p>
<p>显然这种框框展示，并不能满足狂拽酷炫diao炸天的特效，既然没有，那就照着二维的地图框架，自己整一个吧。先上图:</p>
<p><img src="top_img.png"></p>
<p>来个动的：</p>
<p><video src='1.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>在做三维之前，那时候用的最多的是 <strong>MapBoxGL</strong>，所以我就以 <strong>MapBoxGL</strong> 的 <a href='https://docs.mapbox.com/mapbox-gl-js/api/markers/#popup' target="_blank" ><strong>Popup</strong></a>   为基础原型进行的封装。先说一下思路</p>
<ul>
<li>用js来动态创建弹窗的基础DOM框架。包括弹出框的名称，弹窗内容，弹窗的底部尖尖头。</li>
<li>利用Cesium提供的实时帧渲染方法，来不停的修改弹出框的位置。</li>
<li>然后就是完善和丰富整个功能了。</li>
</ul>
<ol>
<li><p>创建面板代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">CesiumPopup.prototype.initPanle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> closeBtnIcon = <span class="string">&#x27;&lt;svg t=&quot;1603334792546&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;1328&quot; width=&quot;32&quot; height=&quot;32&quot;&gt;&lt;path d=&quot;M568.922 508.232L868.29 208.807a39.139 39.139 0 0 0 0-55.145l-1.64-1.64a39.139 39.139 0 0 0-55.09 0l-299.367 299.82-299.425-299.934a39.139 39.139 0 0 0-55.088 0l-1.697 1.64a38.46 38.46 0 0 0 0 55.09l299.48 299.594-299.424 299.48a39.139 39.139 0 0 0 0 55.09l1.64 1.696a39.139 39.139 0 0 0 55.09 0l299.424-299.48L811.56 864.441a39.139 39.139 0 0 0 55.089 0l1.696-1.64a39.139 39.139 0 0 0 0-55.09l-299.48-299.537z&quot; p-id=&quot;1329&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    _panelContainer = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    _panelContainer.classList.add(<span class="string">&#x27;cesium-popup-panel&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.className &amp;&amp; <span class="built_in">this</span>.className !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      _panelContainer.classList.add(<span class="built_in">this</span>.className)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _closeBtn = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    _closeBtn.classList.add(<span class="string">&#x27;cesium-popup-close-btn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    _closeBtn.innerHTML = closeBtnIcon</span><br><span class="line"></span><br><span class="line">    <span class="comment">// header container</span></span><br><span class="line">    <span class="keyword">var</span> headerContainer = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    headerContainer.classList.add(<span class="string">&#x27;cesium-popup-header-panel&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.headerTitle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.headerTitle.classList.add(<span class="string">&#x27;cesium-poput-header-title&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.headerTitle.innerHTML = <span class="built_in">this</span>.title</span><br><span class="line"></span><br><span class="line">    headerContainer.appendChild(<span class="built_in">this</span>.headerTitle)</span><br><span class="line">    _panelContainer.appendChild(_closeBtn)</span><br><span class="line"></span><br><span class="line">    _panelContainer.appendChild(headerContainer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// content container</span></span><br><span class="line"></span><br><span class="line">    _contentContainer = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    _contentContainer.classList.add(<span class="string">&#x27;cesium-popup-content-panel&#x27;</span>)</span><br><span class="line">    _contentContainer.innerHTML = <span class="built_in">this</span>.content</span><br><span class="line"></span><br><span class="line">    _panelContainer.appendChild(_contentContainer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//tip container</span></span><br><span class="line">    <span class="keyword">var</span> tipContaienr = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    tipContaienr.classList.add(<span class="string">&#x27;cesium-popup-tip-panel&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tipDiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    tipDiv.classList.add(<span class="string">&#x27;cesium-popup-tip-bottom&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    tipContaienr.appendChild(tipDiv)</span><br><span class="line"></span><br><span class="line">    _panelContainer.appendChild(tipContaienr)</span><br><span class="line"></span><br><span class="line">    _panelContainer.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    <span class="comment">// add to Viewer Container</span></span><br><span class="line">    _viewer.cesiumWidget.container.appendChild(_panelContainer)</span><br><span class="line">    <span class="built_in">this</span>.emit(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实时更新面板位置(核心代码)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">CesiumPopup.prototype.addTo = <span class="function"><span class="keyword">function</span> (<span class="params">viewer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_viewer) <span class="built_in">this</span>.remove()</span><br><span class="line">    _viewer = viewer</span><br><span class="line">    <span class="built_in">this</span>.initPanle();</span><br><span class="line">    <span class="comment">//关闭按钮</span></span><br><span class="line">    _closeBtn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="built_in">this</span>.closeHander, <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.position) &#123;</span><br><span class="line">      _panelContainer.style.display = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">      _renderListener = _viewer.scene.postRender.addEventListener(<span class="built_in">this</span>.render, <span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">  &#125;</span><br><span class="line">CesiumPopup.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> geometry = <span class="built_in">this</span>.position</span><br><span class="line">    <span class="keyword">if</span> (!geometry) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">var</span> position = Cesium.SceneTransforms.wgs84ToWindowCoordinates(_viewer.scene, geometry)</span><br><span class="line">    <span class="keyword">if</span> (!position) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_panelContainer) &#123;</span><br><span class="line">      _panelContainer.style.left = position.x - _panelContainer.offsetWidth / <span class="number">2</span> + <span class="built_in">this</span>.offset[<span class="number">0</span>] + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">      _panelContainer.style.top = position.y - _panelContainer.offsetHeight - <span class="number">10</span> + <span class="built_in">this</span>.offset[<span class="number">1</span>] + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>代码中用到Cesium提供的实时渲染事件：<strong>postRender</strong> ，此外还有 <strong>preRender</strong> ，<strong>preUpdate</strong>，<strong>postUpdate</strong>,具体详细去文档查看<a href='https://cesium.com/docs/cesiumjs-ref-doc/Scene.html' target="_blank" ><strong>Scene</strong></a></p>
</li>
<li><p>功能和事件</p>
</li>
</ol>
<ul>
<li><p>方法：</p>
<ul>
<li>设置弹窗标题的方法 <strong>setTitle(title:String)</strong> </li>
<li>设置弹窗位置方法 <strong>setPosition(position:Cesium.Cartesian3)</strong> </li>
<li>设置弹窗内容方法 <strong>setHTML(html:HTML)</strong> </li>
<li>设置弹窗偏移量方法 <strong>setOffset(offset:Array)</strong> 默认[0,0]</li>
<li>弹窗添加到Viewer里面  <strong>addTo(viewer:Viewer)</strong></li>
</ul>
</li>
<li><p>事件</p>
<ul>
<li><strong>open</strong> 弹窗显示事件</li>
<li><strong>close</strong> 弹窗关闭事件  </li>
</ul>
</li>
</ul>
<ol start="4">
<li>初始值<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  <span class="attr">title</span>:<span class="built_in">String</span>, <span class="comment">//弹窗名称</span></span><br><span class="line">  <span class="attr">className</span>: <span class="built_in">String</span>, <span class="comment">//弹窗额外类名</span></span><br><span class="line">  <span class="attr">offset</span>:[<span class="number">0</span>,<span class="number">0</span>] <span class="comment">//弹窗默认偏移量  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用示例 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> CesiumPopup(&#123;</span><br><span class="line">         <span class="attr">title</span>:<span class="string">&#x27;信息&#x27;</span></span><br><span class="line">   &#125;).setPosition(position).setHTML(html).addTo(viewer).setTitle(<span class="string">&#x27;详细信息框&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a.on(<span class="string">&#x27;close&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;close&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">a.on(<span class="string">&#x27;open&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>相关样式<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* pop框css*/</span></span><br><span class="line"><span class="selector-class">.cesium-popup-panel</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">312px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00fcf9</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">23</span>, <span class="number">50</span>, <span class="number">108</span>, <span class="number">0.6</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#4674d6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cesium-popup-tip-panel</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cesium-popup-tip-bottom</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">17px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">23</span>, <span class="number">50</span>, <span class="number">108</span>, <span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#4674d6</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">17px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">10px</span> auto <span class="number">0</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cesium-popup-header-panel</span> &#123;</span><br><span class="line">  <span class="comment">/* display: flex; */</span></span><br><span class="line">  <span class="comment">/* justify-content: space-between; */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">23</span>, <span class="number">50</span>, <span class="number">108</span>, <span class="number">0.8</span>);</span><br><span class="line"></span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#4674d6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cesium-poput-header-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Microsoft YaHei;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cesium-popup-content-panel</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cesium-popup-close-btn</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cesium-popup-close-btn</span>,</span><br><span class="line"><span class="selector-class">.cesium-popup-close-btn</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line">cesium-popup-close-btn &gt; svg<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#00fcf9</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cesium-popup-close-btn</span> &gt; svg &#123;</span><br><span class="line">  user-select: auto;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4674d6</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="comment">/* height: 15px; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2>完整代码都放到 <strong>github</strong> 上，需要的移步<a href='https://github.com/JerckyLY/cesium-demo-view' target="_blank" >Cesium-demo-view</a>  </li>
</ol>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-PmlZqHcQ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-PmlZqHcQ"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "海阔天空",
              author: "信乐团",
              url: "https://freetyst.nf.migu.cn/public/product9th/product41/2020/07/0210/2020%E5%B9%B406%E6%9C%8830%E6%97%A515%E7%82%B941%E5%88%86%E7%B4%A7%E6%80%A5%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E5%92%AA%E5%92%95AVEX42805%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/69962300606104019.mp3?key=5afb7e45a203a847&Tim=1603341081880&channelid=00&msisdn=46aaa7bcb7f9449d851bf4f92767a358&CI=699623006062600913000009976326&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/0703/1114/ASc15a1b45cb0c61577f2afa47ea9ce0b0.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>Cesium</category>
      </categories>
      <tags>
        <tag>cesium</tag>
        <tag>webgis</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium系列(3)--全景漫游(室内漫游)第一视角跟随</title>
    <url>/2020/08/19/Cesium%E5%85%A5%E9%97%A8-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Cesium的全景漫游-室内漫游-第一视角跟随"><a href="#Cesium的全景漫游-室内漫游-第一视角跟随" class="headerlink" title="Cesium的全景漫游(室内漫游)第一视角跟随"></a><center>Cesium的全景漫游(室内漫游)第一视角跟随<center/></h2><blockquote>
<p>Cesium的示例中是有漫游的示例。但是角度并不是第一视角。如下图：   </p>
</blockquote>
<p><img src="1.png"></p>
<p>在对于特殊的需求中，比如室内漫游。如果不是第一视角，漫游的过程中会被室内其他物体遮挡，效果不好，也不切实际。因此需要在此基础上进行修改，以达到好的效果。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li><p>在实际应用中，漫游的路线是规划好的。也就是一系列的坐标点，然后根据坐标点插值计算，平滑运动。获取的方式很多种，看实际项目需求。我是事先选取好的点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myPositions = [</span><br><span class="line">  [<span class="number">109.05832893717263</span>, <span class="number">37.441496598851096</span>],</span><br><span class="line">  [<span class="number">109.05855416786699</span>, <span class="number">37.44130123438769</span>],</span><br><span class="line">   <span class="comment">//...       </span></span><br><span class="line">  [<span class="number">109.0587449465546</span>, <span class="number">37.44119249116668</span>],</span><br><span class="line">  [<span class="number">109.05845600554856</span>, <span class="number">37.441396645980845</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 只有经纬度没有高度，因为我是把高度写死的，如果需要高度变化，是可以加上高度。</p>
</blockquote>
</li>
<li><p>指定动画的起始时间，然后把 <strong>timeline</strong> 调整至起始时间，然后设置相关参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> start = Cesium.JulianDate.fromDate(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2015</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">16</span>));</span><br><span class="line"><span class="keyword">var</span> stop = Cesium.JulianDate.addSeconds(</span><br><span class="line">  start,</span><br><span class="line">  myPositions.length - <span class="number">1</span>,</span><br><span class="line">  <span class="keyword">new</span> Cesium.JulianDate()</span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//Make sure viewer is at the desired time.</span></span><br><span class="line">viewer.clock.startTime = start.clone();</span><br><span class="line">viewer.clock.stopTime = stop.clone();</span><br><span class="line">viewer.clock.currentTime = start.clone();</span><br><span class="line">viewer.clock.clockRange = Cesium.ClockRange.LOOP_STOP; <span class="comment">//Loop at the end</span></span><br><span class="line">viewer.clock.multiplier = <span class="number">0.3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set timeline to simulation bounds</span></span><br><span class="line">viewer.timeline.zoomTo(start, stop);</span><br></pre></td></tr></table></figure>
<p>开始时间是可以随意给定的，我这里给的是 <strong>new Date(2015, 2, 25,16)</strong><br>结束时间这一点需要注意的是，根据数组的长度来定的。结束时间必须大于开始时间。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stop = Cesium.JulianDate.addSeconds(</span><br><span class="line">    start,</span><br><span class="line">    myPositions.length - <span class="number">1</span>,</span><br><span class="line">    <span class="keyword">new</span> Cesium.JulianDate()</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>
<p>设置动画的参数：<strong>clockRange</strong> 是播放模式 <strong>Cesium.ClockRange.LOOP_STOP</strong> 自动循环播放。<strong>multiplier</strong> 是播放的速度</p>
</li>
<li><p>根据坐标数组，计算插值点数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">computeCirclularFlight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> property = <span class="keyword">new</span> Cesium.SampledPositionProperty();</span><br><span class="line">    <span class="comment">//设置插入选项</span></span><br><span class="line">    property.setInterpolationOptions(&#123;</span><br><span class="line">      <span class="comment">// interpolationDegree: 1,</span></span><br><span class="line">      <span class="comment">// interpolationAlgorithm: Cesium.LinearApproximation,</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// interpolationDegree: 5,</span></span><br><span class="line">      <span class="comment">// interpolationAlgorithm:</span></span><br><span class="line">      <span class="comment">//   Cesium.LagrangePolynomialApproximation,</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">interpolationDegree</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">interpolationAlgorithm</span>: Cesium.HermitePolynomialApproximation,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myPositions.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> time = Cesium.JulianDate.addSeconds(</span><br><span class="line">        start,</span><br><span class="line">        i,</span><br><span class="line">        <span class="keyword">new</span> Cesium.JulianDate()</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">var</span> position = Cesium.Cartesian3.fromDegrees(</span><br><span class="line">        myPositions[i][<span class="number">0</span>],</span><br><span class="line">        myPositions[i][<span class="number">1</span>],</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">      );</span><br><span class="line">      property.addSample(time, position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> property;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不同插值配置设置，得出来的结果是不同的，可以参照Cesium示例查看。</p>
</li>
<li><p>创建运动的物体，并把物体设置为镜头追踪的对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> position = computeCirclularFlight();</span><br><span class="line"><span class="comment">//Actually create the entity</span></span><br><span class="line"><span class="keyword">var</span> entity = viewer.entities.add(&#123;</span><br><span class="line">  <span class="comment">//Set the entity availability to the same interval as the simulation time.</span></span><br><span class="line">  <span class="attr">availability</span>: <span class="keyword">new</span> Cesium.TimeIntervalCollection([</span><br><span class="line">    <span class="keyword">new</span> Cesium.TimeInterval(&#123;</span><br><span class="line">      <span class="attr">start</span>: start,</span><br><span class="line">      <span class="attr">stop</span>: stop,</span><br><span class="line">    &#125;),</span><br><span class="line">  ]),</span><br><span class="line">  <span class="comment">//Use our computed positions</span></span><br><span class="line">  <span class="attr">position</span>: position,</span><br><span class="line">  <span class="comment">//Automatically compute orientation based on position movement.</span></span><br><span class="line">  <span class="attr">orientation</span>: <span class="keyword">new</span> Cesium.VelocityOrientationProperty(position),</span><br><span class="line">  <span class="attr">model</span>: &#123;</span><br><span class="line">    <span class="attr">uri</span>: <span class="string">&#x27;./SampleData/models/CesiumAir/Cesium_Air.glb&#x27;</span>,</span><br><span class="line">    <span class="attr">minimumPixelSize</span>: <span class="number">64</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//Show the path as a pink line sampled in 1 second increments.</span></span><br><span class="line">  <span class="attr">path</span>: &#123;</span><br><span class="line">    <span class="attr">resolution</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">material</span>: <span class="keyword">new</span> Cesium.PolylineGlowMaterialProperty(&#123;</span><br><span class="line">      <span class="attr">glowPower</span>: <span class="number">0.1</span>,</span><br><span class="line">      <span class="attr">color</span>: Cesium.Color.GREEN,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">width</span>: <span class="number">16</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//追踪物体</span></span><br><span class="line"> viewer.trackedEntity = entity;  </span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
<li><p>每一帧根据物体的坐标和走向，设置相机的角度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//视角变换</span></span><br><span class="line"> <span class="keyword">var</span> matrix3Scratch = <span class="keyword">new</span> Cesium.Matrix3();</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getModelMatrix</span>(<span class="params">entity, time, result</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> position = Cesium.Property.getValueOrUndefined(</span><br><span class="line">    entity.position,</span><br><span class="line">    time,</span><br><span class="line">    <span class="keyword">new</span> Cesium.Cartesian3()</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (!Cesium.defined(position)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> orientation = Cesium.Property.getValueOrUndefined(</span><br><span class="line">    entity.orientation,</span><br><span class="line">    time,</span><br><span class="line">    <span class="keyword">new</span> Cesium.Quaternion()</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (!Cesium.defined(orientation)) &#123;</span><br><span class="line">    result = Cesium.Transforms.eastNorthUpToFixedFrame(</span><br><span class="line">      position,</span><br><span class="line">      <span class="literal">undefined</span>,</span><br><span class="line">      result</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = Cesium.Matrix4.fromRotationTranslation(</span><br><span class="line">      Cesium.Matrix3.fromQuaternion(orientation, matrix3Scratch),</span><br><span class="line">      position,</span><br><span class="line">      result</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> scratch = <span class="keyword">new</span> Cesium.Matrix4();</span><br><span class="line"> <span class="keyword">var</span> renderListener = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//viewer.camera.positionCartographic.height = 2000 + $this.limitCamera(f_property);</span></span><br><span class="line">  <span class="keyword">if</span> (viewer.trackedEntity) &#123;</span><br><span class="line">    getModelMatrix(viewer.trackedEntity, viewer.clock.currentTime, scratch);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> transformX = <span class="number">90</span>; <span class="comment">//距离运动点的距离（后方）</span></span><br><span class="line">    <span class="keyword">var</span> transformZ = <span class="number">55</span>; <span class="comment">//距离运动点的高度（上方）</span></span><br><span class="line">    <span class="keyword">var</span> transformY = <span class="number">0</span>; <span class="comment">//距离运动点的高度（侧方）</span></span><br><span class="line">    viewer.scene.camera.lookAtTransform(</span><br><span class="line">      scratch,</span><br><span class="line">      <span class="keyword">new</span> Cesium.Cartesian3(-transformX, transformY, transformZ)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> viewer.scene.preRender.addEventListener(renderListener);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>监听事件中，<strong>transformX</strong> 是相机距离运动点的正后方距离。<strong>transformY</strong> 是相机距离运动点的侧方距离。<strong>transformZ</strong> 是相机距离运动点的上方距离。</p>
</blockquote>
<blockquote>
<p>开始播放的时候 需要把 <strong>shouldAnimate</strong> 打开， viewer.clock.shouldAnimate = true;<br>暂停播放 需要把 <strong>shouldAnimate</strong> 关闭， viewer.clock.shouldAnimate = false; 同时把镜头追踪对象去除 viewer.trackedEntity = undefined;</p>
</blockquote>
</li>
</ol>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><ul>
<li><p>室外轨迹漫游<br><video src='1.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></p>
</li>
<li><p>调整角度参数 室内漫游<br><video src='2.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'></video></p>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>  完整代码都放到 <strong>github</strong> 上，需要的移步<a href='https://github.com/JerckyLY/cesium-demo-view' target="_blank" >Cesium-demo-view</a>  </p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-FbitBnWS" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-FbitBnWS"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "等我先说",
              author: "夏天Alex",
              url: "//freetyst.nf.migu.cn/public/productBe/productB01/2019/08/0715/2013%E5%B9%B405%E6%9C%8814%E6%97%A5%E7%BE%8E%E5%8A%9B%E6%98%9F%E7%A9%BA%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A51%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/60066801295.mp3?key=1d5649e633106758&Tim=1603352822023&channelid=00&msisdn=6adb56a5e32741a08e14c0776ca4bf9f&CI=600668012952600902000007984502&F=000009",
              pic: "https://p3fx.kgimg.com/stdmusic/20160907/20160907201949745191.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>]]></content>
      <categories>
        <category>Cesium</category>
      </categories>
      <tags>
        <tag>cesium</tag>
        <tag>webgis</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium系列(2)--绘制图片文字标注</title>
    <url>/2020/07/21/Cesium%E5%85%A5%E9%97%A8-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基于Cesium-Billboard的图文标注"><a href="#基于Cesium-Billboard的图文标注" class="headerlink" title="基于Cesium Billboard的图文标注"></a><center>基于Cesium Billboard的图文标注<center/></h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>  项目需求：在模型上方添加文字标注，背景是一张图片。<br>  如果只是加文字的话，<strong>Cesium</strong> 直接加一个<strong>label</strong>就行了，或者只加一个图片，<strong>Cesium</strong> 直接加一个 <strong>billboard</strong> 也是可以的。如果是两者结合是需要另外处理的。</p>
<h2 id="单独文字"><a href="#单独文字" class="headerlink" title="单独文字"></a>单独文字</h2><p>  单独加文字可以直接用 <strong>label</strong>, 伪代码如下：<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">viewer.entities.add(&#123;</span><br><span class="line">    <span class="attr">position</span>: Cesium.Cartesian3.fromDegrees(-<span class="number">75.1641667</span>, <span class="number">39.9522222</span>),</span><br><span class="line">    <span class="attr">label</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;Philadelphia&quot;</span>,</span><br><span class="line">      <span class="attr">font</span>: <span class="string">&quot;24px Helvetica&quot;</span>,</span><br><span class="line">      <span class="attr">fillColor</span>: Cesium.Color.SKYBLUE,</span><br><span class="line">      <span class="attr">outlineColor</span>: Cesium.Color.BLACK,</span><br><span class="line">      <span class="attr">outlineWidth</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">style</span>: Cesium.LabelStyle.FILL_AND_OUTLINE,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><br>  效果：<br>  <img src="2.png"></p>
<h2 id="单独加图片"><a href="#单独加图片" class="headerlink" title="单独加图片"></a>单独加图片</h2><p>  单独显示图片使用 <strong>billboard</strong>, 伪代码如下：<br>   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">viewer.entities.add(&#123;</span><br><span class="line">   <span class="attr">position</span>: Cesium.Cartesian3.fromDegrees(-<span class="number">75.59777</span>, <span class="number">40.03883</span>),</span><br><span class="line">   <span class="attr">billboard</span>: &#123;</span><br><span class="line">     <span class="attr">image</span>: <span class="string">&quot;../images/Cesium_Logo_overlay.png&quot;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><br>  效果：<br>  <img src="img.png"></p>
<h2 id="图文结合"><a href="#图文结合" class="headerlink" title="图文结合"></a>图文结合</h2><ol>
<li><p>思路：根据原始添加图片的过程，再结合 <strong>billboard</strong> 文档的查看其中的 <strong>image</strong> 定义：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">image : StringScene/Billboard.js 910</span><br><span class="line">Gets or sets the image to be used for this billboard. If a texture has already been created for the given image, the existing texture is used.</span><br><span class="line">This property can be set to a loaded Image, a URL which will be loaded as an Image automatically, a canvas, or another billboard&#x27;s image property (from the same billboard collection).</span><br></pre></td></tr></table></figure>
<blockquote>
<p>This property can be set to <strong>a loaded Image, a URL which will be loaded as an Image automatically, a canvas, or another billboard’s image property (from the same billboard collection)</strong>.<br>可以将此属性设置为已加载的图像，将自动作为图像加载的URL，画布或其他广告牌的图像属性（来自同一广告牌集合）。</p>
</blockquote>
<p>上述文字说明 <strong>image</strong> 可以是 <strong>canvas</strong>, 那我们就可以把图片和文字画到 <strong>canvas</strong> 中，最后把结果赋值给 <strong>image</strong> 就行了。</p>
</li>
<li><p>实现：</p>
</li>
</ol>
<ul>
<li><p>绘制图文方法  </p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">      <span class="comment">//根据图片和文字绘制canvas  ratio参数 是放大倍数</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">drawCanvas</span>(<span class="params">img, text, ratio</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// width height</span></span><br><span class="line">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>); <span class="comment">//创建canvas标签</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> width = ctx.measureText(text).width + <span class="number">8</span>,</span><br><span class="line">          height = <span class="number">20</span>; <span class="comment">//高度我这里是定死的，可以作为参数参入</span></span><br><span class="line">    </span><br><span class="line">        canvas.style.opacity = <span class="number">1</span>;</span><br><span class="line">        canvas.width = width * ratio;</span><br><span class="line">        canvas.height = height * ratio;</span><br><span class="line">        canvas.style.width = width + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        canvas.style.height = height + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//然后将画布缩放，将图像放大ratio倍画到画布上 目的 使图片文字更加清晰</span></span><br><span class="line">        ctx.scale(ratio, ratio);</span><br><span class="line">        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        image.src = img;</span><br><span class="line">         <span class="comment">// 图片创建是异步操作，需要在图片完成之后，再写入文字，能保证文字在图片上方。</span></span><br><span class="line">         <span class="comment">// 如果不在里面，会出现图片覆盖文字</span></span><br><span class="line">        image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          ctx.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">          <span class="comment">// 名称文字</span></span><br><span class="line">          ctx.fillStyle = <span class="string">&#x27;#ff0000&#x27;</span>;</span><br><span class="line">          ctx.font = <span class="string">&#x27;8px 宋体&#x27;</span>;</span><br><span class="line">          ctx.fillText(text, <span class="number">8</span>, height / <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> canvas;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">+ 加载到Cesium中 </span></span><br><span class="line"><span class="string">   `</span><span class="string">``</span>js</span><br><span class="line">      viewer.entities.add(&#123;</span><br><span class="line">           <span class="attr">position</span>: Cesium.Cartesian3.fromDegrees(</span><br><span class="line">             <span class="number">109.05830792532525</span>,</span><br><span class="line">             <span class="number">37.44105749283626</span>,</span><br><span class="line">             <span class="number">16</span></span><br><span class="line">           ),</span><br><span class="line">           <span class="attr">billboard</span>: &#123;</span><br><span class="line">             <span class="attr">image</span>: drawCanvas(<span class="string">&#x27;./source/images/bg.png&#x27;</span>, <span class="string">&#x27;Hello World 你好 Cesium!&#x27;</span>, <span class="number">3</span>),</span><br><span class="line">             <span class="attr">sizeInMeters</span>: <span class="literal">true</span>,</span><br><span class="line">             <span class="attr">scale</span>: <span class="number">0.1</span>,</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>效果：<br><img src="3.png"></p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-DEwwdATa" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-DEwwdATa"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "渡口",
              author: "蔡琴",
              url: "//freetyst.nf.migu.cn/public/product8th/product38/2020/03/1620/2018%E5%B9%B409%E6%9C%8814%E6%97%A515%E7%82%B953%E5%88%86%E7%B4%A7%E6%80%A5%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E5%8D%8E%E7%BA%B3999%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/6005751EW9N.mp3?key=e72e077e1e66d0f6&Tim=1597915021839&channelid=00&msisdn=f040f3f4e9c0474db35d5c03e22cc5dd&CI=6005751EW9N2600908000009874924&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2019/0708/0828/ASad0c2272b87e4adda1785884fe48f6e7.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script></li>
</ul>
]]></content>
      <categories>
        <category>Cesium</category>
      </categories>
      <tags>
        <tag>cesium</tag>
        <tag>webgis</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium系列(1)--Vue-cli3 + Cesium 快速构建</title>
    <url>/2020/07/01/Cesium%E5%85%A5%E9%97%A8-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue-cli3集成Cesium的vue-config-js配置"><a href="#vue-cli3集成Cesium的vue-config-js配置" class="headerlink" title="vue-cli3集成Cesium的vue.config.js配置"></a><center>vue-cli3集成Cesium的vue.config.js配置<center/></h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  2020年给你讲个笑话，鹅厂被骗了。hhhhhhh。<br>  很久没更新了。疫情影响，经历了在家办公，也经历了出门戴口罩的时期。不过，一切都会好的。<br>  言归正传，新的一年，不管经历了什么都要继续。今年准备从二维转战三维了，开源免费的目前也就是Cesium了。之前一直都知道这个，只是从来没有真正的使用过，接触过。刚开始的时候，就看了一天的资料，也就是本地运行一下，大致看了一下代码和案例。然后就给我一个项目让我直接该需求了，头两天也是有点手忙脚乱，现在大概了解一点了，就记录一下最近遇到的问题。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>有个vue-cli3的项目, 然后用 <strong>npm</strong> 命令去安装 <strong>cesium</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i cesium  或者 cnpm i cesium </span><br></pre></td></tr></table></figure></li>
<li><p>安装 <strong>cesium</strong> 之后 需求在 <strong>vue.config.js</strong> 文件中去配置，如果没有该文件就在根目录新建一个。</p>
</li>
<li><p>配置内容</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cesiumSource = <span class="string">&#x27;./node_modules/cesium/Source&#x27;</span></span><br><span class="line"><span class="keyword">const</span> cesiumWorkers = <span class="string">&#x27;../Build/Cesium/Workers&#x27;</span></span><br><span class="line"><span class="comment">// 后续 import 引入 cesium 为改路径下的</span></span><br><span class="line"><span class="keyword">const</span> cesiumBuild = <span class="string">&#x27;./node_modules/cesium/Build/Cesium&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 基本路径</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    <span class="comment">// 输出文件目录</span></span><br><span class="line">    <span class="attr">outputDir</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">    <span class="comment">// eslint-loader 是否在保存的时候检查</span></span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// webpack-dev-server 相关配置</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">open</span>: process.platform === <span class="string">&quot;darwin&quot;</span>,</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">5000</span>,</span><br><span class="line">        <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">hotOnly</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">disableHostCheck</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">        <span class="attr">output</span>: &#123;</span><br><span class="line">            <span class="attr">sourcePrefix</span>: <span class="string">&#x27; &#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">amd</span>: &#123;</span><br><span class="line">            <span class="attr">toUrlUndefined</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">node</span>: &#123;</span><br><span class="line">            <span class="comment">// Resolve node module use of fs</span></span><br><span class="line">            <span class="attr">fs</span>: <span class="string">&quot;empty&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">resolve</span>: &#123;</span><br><span class="line">            <span class="attr">alias</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;@&#x27;</span>: path.resolve(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">                <span class="string">&#x27;cesium&#x27;</span>: path.resolve(__dirname, cesiumBuild)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: path.join(cesiumSource, cesiumWorkers), <span class="attr">to</span>: <span class="string">&#x27;Workers&#x27;</span> &#125;]),</span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: path.join(cesiumSource, <span class="string">&#x27;Assets&#x27;</span>), <span class="attr">to</span>: <span class="string">&#x27;Assets&#x27;</span> &#125;]),</span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: path.join(cesiumSource, <span class="string">&#x27;Widgets&#x27;</span>), <span class="attr">to</span>: <span class="string">&#x27;Widgets&#x27;</span> &#125;]),</span><br><span class="line">            <span class="keyword">new</span> CopyWebpackPlugin([&#123; <span class="attr">from</span>: path.join(cesiumSource, <span class="string">&#x27;../Build/Cesium/ThirdParty&#x27;</span>), <span class="attr">to</span>: <span class="string">&#x27;ThirdParty&#x27;</span> &#125;]),</span><br><span class="line">            <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">                <span class="attr">CESIUM_BASE_URL</span>: <span class="built_in">JSON</span>.stringify(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">module</span>: &#123;</span><br><span class="line">            <span class="attr">unknownContextCritical</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>在文件中引用 <strong>cesium</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;cesium/Widgets/widgets.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Cesium <span class="keyword">from</span> <span class="string">&quot;cesium/Cesium&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>实例化  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">       initCesium () &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(Cesium.VERSION)</span><br><span class="line">           <span class="comment">// viewer对象不能放入data中，由于vue会对data对象监听，会使内存暴增。</span></span><br><span class="line">           <span class="built_in">window</span>.$CViewer =  <span class="keyword">new</span> Cesium.Viewer(<span class="string">&#x27;cesiumContainer&#x27;</span>, &#123;</span><br><span class="line">               <span class="comment">//Hide the base layer picker</span></span><br><span class="line">               <span class="attr">baseLayerPicker</span>: <span class="literal">false</span>,</span><br><span class="line">               <span class="comment">// timeline: false,</span></span><br><span class="line">               <span class="attr">animation</span>: <span class="literal">false</span>,</span><br><span class="line">               <span class="attr">shouldAnimate</span>: <span class="literal">true</span>,</span><br><span class="line">               <span class="attr">navigationHelpButton</span>: <span class="literal">true</span>,</span><br><span class="line">               <span class="attr">fullscreenButton</span>: <span class="literal">false</span>,</span><br><span class="line">               <span class="attr">geocoder</span>: <span class="literal">false</span>,</span><br><span class="line">               <span class="attr">scene3DOnly</span>: <span class="literal">true</span>,</span><br><span class="line">               <span class="attr">homeButton</span>: <span class="literal">true</span>,</span><br><span class="line">               <span class="attr">imageryProvider</span>: <span class="keyword">new</span> Cesium.UrlTemplateImageryProvider(&#123;</span><br><span class="line">                   <span class="attr">url</span>: <span class="string">&#x27;http://www.google.cn/maps/vt?lyrs=s&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&#x27;</span>,</span><br><span class="line">                   <span class="attr">credit</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                   <span class="attr">tilingScheme</span>: <span class="keyword">new</span> Cesium.WebMercatorTilingScheme()</span><br><span class="line">               &#125;),</span><br><span class="line">               <span class="attr">mapProjection</span>: <span class="keyword">new</span> Cesium.WebMercatorProjection()</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="comment">// 添加天地图标注图层</span></span><br><span class="line">           <span class="keyword">let</span> tdt =  $CViewer.scene.imageryLayers.addImageryProvider(<span class="keyword">new</span> Cesium.WebMapTileServiceImageryProvider(&#123;</span><br><span class="line">               <span class="attr">url</span>: <span class="string">&quot;http://t0.tianditu.com/cva_w/wmts?service=wmts&amp;request=GetTile&amp;version=1.0.0&amp;LAYER=cva&amp;tileMatrixSet=w&amp;TileMatrix=&#123;TileMatrix&#125;&amp;TileRow=&#123;TileRow&#125;&amp;TileCol=&#123;TileCol&#125;&amp;style=default&amp;format=tiles&amp;tk=f47269183506137375ed3a960cb675cd&quot;</span>,</span><br><span class="line">               <span class="attr">layer</span>: <span class="string">&quot;tdtAnnoLayer&quot;</span>,</span><br><span class="line">               <span class="attr">style</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">               <span class="attr">format</span>: <span class="string">&quot;image/jpeg&quot;</span>,</span><br><span class="line">               <span class="attr">tileMatrixSetID</span>: <span class="string">&quot;GoogleMapsCompatible&quot;</span></span><br><span class="line">           &#125;));</span><br><span class="line">           <span class="comment">// 加载3dtiles</span></span><br><span class="line">           <span class="keyword">const</span> tileset = <span class="keyword">new</span> Cesium.Cesium3DTileset(&#123;</span><br><span class="line">               <span class="attr">url</span>: <span class="string">&#x27;Cesium3DTiles/Tilesets/Tileset/tileset.json&#x27;</span></span><br><span class="line">           &#125;);</span><br><span class="line">        </span><br><span class="line">           tileset.readyPromise.then(<span class="function"><span class="keyword">function</span>(<span class="params">tileset</span>) </span>&#123;</span><br><span class="line">               $CViewer.scene.primitives.add(tileset);</span><br><span class="line">               $CViewer.zoomTo(tileset, <span class="keyword">new</span> Cesium.HeadingPitchRange(<span class="number">0.0</span>, -<span class="number">0.5</span>, tileset.boundingSphere.radius * <span class="number">2.0</span>));</span><br><span class="line">           &#125;).otherwise(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(error);</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注意项</p>
<div class="note danger flat"><blockquote>
<p>实例化的viewer对象，不能放入vue的 <strong>data</strong> 中去，由于vue的机制，会监听data中的属性。如果放入data中，会内存容易爆掉。最好的方法是放入 <strong>window</strong> 对象中。</p>
</blockquote>
</div> 

<pre><code class="js">   window.$CViewer = new Cesium.Viewer()
</code></pre>
<div class="note info flat"><blockquote>
<p>对于本地模型文件我一般都是放入public文件夹引入</p>
</blockquote>
</div> 

<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><blockquote>
<p>后面会写项目中遇到的各种问题，再之后就开始写源码关于Cesium3DTiles调度的一点点研究成果  </p>
</blockquote>
</li>
</ol>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-gxxaVqKM" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-gxxaVqKM"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "我曾",
              author: "隔壁老樊",
              url: "//freetyst.nf.migu.cn/public/productBe/productB01/2019/08/0717/2019%E5%B9%B403%E6%9C%8801%E6%97%A516%E7%82%B937%E5%88%86%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E5%8D%8E%E5%A4%8F%E5%8A%A8%E5%A3%B01%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/63254103405.mp3?key=f5f6bf49ae541152&Tim=1597915519527&channelid=00&msisdn=7189f4cfa3ba4332ab8ddd058a1fb038&CI=632541034052600913000002629846&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/0801/0249/ASf1b833147de26840e610c45b96643885.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>Cesium</category>
      </categories>
      <tags>
        <tag>cesium</tag>
        <tag>webgis</tag>
      </tags>
  </entry>
  <entry>
    <title>mapboxgl工具发布经验总结</title>
    <url>/2020/01/10/mapboxgl-tool-summary/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>  <div class="note info flat"><blockquote>
<p><strong>mapboxgl-print-tool</strong> 是 1.0.5 版本<br><strong>mapboxgl-measure-tool</strong> 是 1.0.6 版本</p>
</blockquote>
</div> 


<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>   在发布 <strong>mapboxgl-print-tool</strong> 和 <strong>mapboxgl-measure-tool</strong> 的过程中遇到了各种问题，毕竟是第一次发布npm包，具体怎么弄也都是网上搜各种博客看到的，也许适用当时他们的，但或许版本或者环境的原因不适合我现在的。<br>   所以在这记录一下这几天遇到的问题和对应解决办法</p>
<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><ol>
<li>npm初始化   </li>
</ol>
<ul>
<li>注册自己的npm账号</li>
<li>项目创建一个仓库，我一般都是在 <strong><code>github</code></strong> 上创建。之后把git地址在本地下载之后，运行 npm init 开始初始化 </li>
</ul>
<ol start="2">
<li><p>npm发布注意</p>
<blockquote>
<p>1、要支持CommonJS模块化规范，所以要求打包后的最后结果也遵守该规则。<br>2、Npm模块使用者的环境是不确定的，很有可能并不支持ES6，所以打包的最后结果应该是采用ES5编写的。并且如果ES5是经过转换的，请最好连同SourceMap一同上传。<br>3、Npm包大小应该是尽量小（有些仓库会限制包大小）<br>4、发布的模块不能将依赖的模块也一同打包，应该让用户选择性的去自行安装。这样可以避免模块应用者再次打包时出现底层模块被重复打包的情况。<br>5、UI组件类的模块应该将依赖的其它资源文件，例如.css文件也需要包含在发布的模块里。</p>
</blockquote>
</li>
<li><p>webpack基本配置</p>
<blockquote>
<p>因为npm包是有依赖，鉴于npm打包注意第4条，需要在webpack中使用 <strong><code>externals</code></strong> 进行配置来告诉webpack哪些模块不需要打包<br>在实际开发中，虽然配置了 <strong><code>externals</code></strong> 但是打包之后使用时，遇到了 Can`t resolve ‘FileSaver’ in XXXX 。<br>针对上面问题，找到了一篇文章介绍的方法然后结合webpack文档，可以解决问题。<br>相关文章 <a href='https://blog.csdn.net/weixin_34239169/article/details/89904172' target="_blank" >Webpack构建library时的踩坑经历</a> 和 <a href='https://www.webpackjs.com/configuration/externals/' target="_blank" >webpack外部扩展(externals)</a></p>
</blockquote>
<p>最后配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// // npm原则， 不同模块 使用不同依赖，root为浏览器环境下</span></span><br><span class="line"><span class="attr">externals</span>: &#123; </span><br><span class="line">    <span class="string">&quot;file-saver&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">commonjs</span>:<span class="string">&quot;file-saver&quot;</span>,</span><br><span class="line">        <span class="attr">commonjs2</span>:<span class="string">&#x27;file-saver&#x27;</span>,</span><br><span class="line">        <span class="attr">amd</span>:<span class="string">&quot;file-saver&quot;</span>,</span><br><span class="line">        <span class="attr">root</span>:<span class="string">&#x27;FileSaver&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;mapbox-gl&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">commonjs</span>:<span class="string">&quot;mapbox-gl&quot;</span>,</span><br><span class="line">        <span class="attr">commonjs2</span>:<span class="string">&#x27;mapbox-gl&#x27;</span>,</span><br><span class="line">        <span class="attr">amd</span>:<span class="string">&quot;mapbox-gl&quot;</span>,</span><br><span class="line">        <span class="attr">root</span>:<span class="string">&quot;mapboxgl&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文件引用使用:</span></span><br><span class="line"><span class="keyword">const</span> FileSaver = <span class="built_in">require</span>(<span class="string">&#x27;file-saver&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mapboxgl =  <span class="built_in">require</span>(<span class="string">&#x27;mapbox-gl&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>npm版本更新</p>
<blockquote>
<p>在用 npm publish 发布的时候 需要注意几点</p>
</blockquote>
</li>
</ol>
<ul>
<li><p>发布前需要登录，npm login 填写自己的账号密码和邮箱</p>
</li>
<li><p>需要把地址改为npm官方库，如果是淘宝或者其它的npm镜像，是发布不通过。 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 设置命令</span><br><span class="line">npm config set registry https://registry.npmjs.org </span><br></pre></td></tr></table></figure></li>
<li><p> 每次发布的版本号都是要比上一次大，同样的版本发布不通过</p>
</li>
</ul>
<ol start="5">
<li>cdn 访问地址预览</li>
</ol>
<ul>
<li>发布之后可以在<a href='https://unpkg.com' target="_blank" >unpkg</a>查看 查看方式 <a href="https://unpkg.com//:package@:version/:file">https://unpkg.com//:package@:version/:file</a> , 比如查看mapboxgl-print-tool中文件<br> <a href="https://unpkg.com/browse/mapboxgl-print-tool@1.0.5/">https://unpkg.com/browse/mapboxgl-print-tool@1.0.5/</a><br> <img src="view01.png"></li>
<li>cdn查看 我使用的是<a href='https://www.jsdelivr.com/' target="_blank" >jsDelivr</a> 查看方式 <a href="https://cdn.jsdelivr.net/npm/package@version/file">https://cdn.jsdelivr.net/npm/package@version/file</a> , 例如：<a href="https://cdn.jsdelivr.net/npm/mapboxgl-print-tool@1.0.5/">https://cdn.jsdelivr.net/npm/mapboxgl-print-tool@1.0.5/</a><br> <img src="view02.png"></li>
</ul>
<h2 id="mapboxgl-print-tool工具框选要点"><a href="#mapboxgl-print-tool工具框选要点" class="headerlink" title="mapboxgl-print-tool工具框选要点"></a>mapboxgl-print-tool工具框选要点</h2><blockquote>
<p>因为mapboxgl使用的是webgl渲染，所以它渲染的比较快。而在对webgl裁剪时，不能像canvas的二维那来操作，这里我是参照<a href='https://segmentfault.com/a/1190000021230396?utm_source=tag-newest' target="_blank" >webgl 读取canvas 像素</a>来实现的</p>
</blockquote>
<ol>
<li><p>根据框选的范围，拿到屏幕上对应的起始点坐标，计算出宽 width 高 height，然后创建 <strong><code>canvas</code></strong> 设置其宽高为计算出的宽高</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bbox 为框选的范围</span></span><br><span class="line"><span class="keyword">const</span> width = bbox[<span class="number">1</span>].x - bbox[<span class="number">0</span>].x</span><br><span class="line"><span class="keyword">const</span> height = bbox[<span class="number">1</span>].y - bbox[<span class="number">0</span>].y</span><br><span class="line"><span class="keyword">let</span> oCanvas = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>)</span><br><span class="line">oCanvas.width= width</span><br><span class="line">oCanvas.height= height</span><br><span class="line">        </span><br></pre></td></tr></table></figure></li>
<li><p>根据地图获取webgl对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取webgl</span></span><br><span class="line"><span class="keyword">const</span> gl =  <span class="built_in">this</span>.map.getCanvas().getContext(<span class="string">&#x27;webgl&#x27;</span>,&#123;<span class="attr">preserveDrawingBuffer</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
<li><p>从webgl中读取像素，然后放入到新的canvas中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立像素集合</span></span><br><span class="line"> <span class="keyword">const</span> pixels  = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>( width*height*<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 从缓冲区读取像素数据，然后将其装到事先建立好的像素集合里</span></span><br><span class="line">gl.readPixels(bbox[<span class="number">0</span>].x, bbox[<span class="number">0</span>].y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);</span><br><span class="line"><span class="comment">// 基于像素集合和尺寸建立ImageData 对象</span></span><br><span class="line"><span class="keyword">const</span> imageData= <span class="keyword">new</span> ImageData(<span class="keyword">new</span> <span class="built_in">Uint8ClampedArray</span>(pixels),width,height);</span><br><span class="line"><span class="comment">// 放入新的canvas中</span></span><br><span class="line"><span class="keyword">const</span> oCtx = oCanvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">oCtx.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
<li><p>翻转处理。不知道什么原因，前3步得出来的结果，像素值是倒立的。所以需要对得到的结果进行竖向翻转。   </p>
<p>处理代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要竖向翻转</span></span><br><span class="line"><span class="keyword">let</span> newData = oCtx.createImageData(width,height)</span><br><span class="line"><span class="keyword">let</span> soureData = oCtx.getImageData(<span class="number">0</span>,<span class="number">0</span>,width,height)</span><br><span class="line"><span class="keyword">const</span> turnNewData =  <span class="built_in">this</span>.imageDataVRevert(soureData,newData)</span><br><span class="line"><span class="comment">// 翻转之后放入canvas中</span></span><br><span class="line">oCtx.putImageData( turnNewData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 由于裁剪的内容是倒立的 因此需要翻转像素</span></span><br><span class="line"><span class="comment"> *  canvas像素竖向翻转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">sourceData</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">newData</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;*&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">imageDataVRevert (sourceData,newData) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,h=sourceData.height;i&lt;h;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>,w=sourceData.width;j&lt;w;j++)&#123;</span><br><span class="line">            newData.data[i*w*<span class="number">4</span>+j*<span class="number">4</span>+<span class="number">0</span>] = sourceData.data[(h-i)*w*<span class="number">4</span>+j*<span class="number">4</span>+<span class="number">0</span>];</span><br><span class="line">            newData.data[i*w*<span class="number">4</span>+j*<span class="number">4</span>+<span class="number">1</span>] = sourceData.data[(h-i)*w*<span class="number">4</span>+j*<span class="number">4</span>+<span class="number">1</span>];</span><br><span class="line">            newData.data[i*w*<span class="number">4</span>+j*<span class="number">4</span>+<span class="number">2</span>] = sourceData.data[(h-i)*w*<span class="number">4</span>+j*<span class="number">4</span>+<span class="number">2</span>];</span><br><span class="line">            newData.data[i*w*<span class="number">4</span>+j*<span class="number">4</span>+<span class="number">3</span>] = sourceData.data[(h-i)*w*<span class="number">4</span>+j*<span class="number">4</span>+<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>未做处理之前:<br><img src="view03.png" alt="未处理">   </p>
<p>处理之后:<br><img src="view04.png" alt="已处理">   </p>
</li>
<li><p>最后根据处理之后的canvas，转成图片打印输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">saveAsIMG (canvas) &#123;</span><br><span class="line">     <span class="keyword">if</span> (navigator.msSaveBlob) &#123;</span><br><span class="line">         navigator.msSaveBlob(canvas.msToBlob(),  <span class="built_in">this</span>.options.fileName);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         canvas.toBlob(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">             saveAs(blob, <span class="built_in">this</span>.options.fileName);</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="hexo自带渲染模板"><a href="#hexo自带渲染模板" class="headerlink" title="hexo自带渲染模板"></a>hexo自带渲染模板</h2></li>
<li><p>HTML写法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;note default&quot;</span>&gt;</span>default<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;note primary&quot;</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;note success&quot;</span>&gt;</span>success<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;note info&quot;</span>&gt;</span>info<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;note warning&quot;</span>&gt;</span>warning<span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;note danger&quot;</span>&gt;</span>danger<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure></li>
<li><p>{ } 写法</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note danger %&#125;note danger danger  endnote &#123;% endnote %&#125; </span><br></pre></td></tr></table></figure></li>
<li><p>效果   </p>
<div class="note default"> 

<blockquote>
<p>default</p>
</blockquote>
</div>
<div class="note primary">

<blockquote>
<p>primary</p>
</blockquote>
</div>
<div class="note success">

<blockquote>
<p>success</p>
</blockquote>
</div>
<div class="note info"> 

<blockquote>
<p>info</p>
</blockquote>
</div>
<div class="note warning">

<blockquote>
<p>warning</p>
</blockquote>
</div>
<div class="note danger"> 

<blockquote>
<p>danger</p>
</blockquote>
</div>
<div class="note danger flat"><blockquote>
<p>note danger danger  endnote</p>
</blockquote>
</div> 

</li>
</ol>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-NItVyAMa" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-NItVyAMa"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "过火",
              author: "张信哲",
              url: "//freetyst.nf.migu.cn/public/product14/2018/08/17/2017%E5%B9%B411%E6%9C%8809%E6%97%A514%E7%82%B902%E5%88%86%E6%89%B9%E9%87%8F%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9D%83%E5%BC%95%E5%85%A52228%E9%A6%96-1/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/%E8%BF%87%E7%81%AB-%E5%BC%A0%E4%BF%A1%E5%93%B2.mp3?key=c2d03ae71e95ebfb&Tim=1597926925899&channelid=00&msisdn=57715f1e611c4222846f8ac437bc1f4f&CI=699121008852600909000008245692&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2019/0520/1828/AS1609221019195527.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>mapboxgl</tag>
        <tag>npm</tag>
        <tag>webpack</tag>
        <tag>webgl</tag>
      </tags>
  </entry>
  <entry>
    <title>mapboxgl-print-tool</title>
    <url>/2020/01/08/mapboxgl-print-tool/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mapboxgl-print-tool"><a href="#mapboxgl-print-tool" class="headerlink" title="mapboxgl-print-tool"></a><center>mapboxgl-print-tool</center></h2><center>地图全图打印，框选打印导出图片</center>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>CDN</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 依赖file-save下载图片</span></span><br><span class="line"> &lt;script src=<span class="string">&quot;https://cdn.bootcss.com/FileSaver.js/2014-11-29/FileSaver.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">// 引用</span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/mapboxgl-print-tool@1.0.5/dist/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> ```js</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    mapboxgl.accessToken = &#x27;pk.eyJ1IjoiamVyY2t5IiwiYSI6ImNqYjI5dWp3dzI1Y2YzMnM3eG0xNnV3bWsifQ.eQp4goc9Ng8SuEZcdgNJ_g&#x27;;</span><br><span class="line">    var map = new mapboxgl.Map(&#123;</span><br><span class="line">        container: &#x27;map&#x27;,</span><br><span class="line">        style: &#x27;mapbox://styles/mapbox/streets-v9&#x27;,</span><br><span class="line">        preserveDrawingBuffer:true //canvas toDataURL</span><br><span class="line">    &#125;);</span><br><span class="line">    const mapPrint  = new MapPrintTool(&#123;</span><br><span class="line">        enableImg:true, //是否出图</span><br><span class="line">        fileName:&#x27;mapDemo.png&#x27; // 文件名</span><br><span class="line">    &#125;)</span><br><span class="line">    map.addControl(mapPrint, &#x27;top-right&#x27;)</span><br><span class="line">    // 监听打印 获取数据 </span><br><span class="line">    mapPrint.on(&#x27;success&#x27;,function (res) &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>模块化</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install mapboxgl-print-tool</span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MapPrintTool <span class="keyword">from</span> <span class="string">&#x27;mapboxgl-print-tool&#x27;</span></span><br><span class="line">mapboxgl.accessToken = <span class="string">&#x27;pk.eyJ1IjoiamVyY2t5IiwiYSI6ImNqYjI5dWp3dzI1Y2YzMnM3eG0xNnV3bWsifQ.eQp4goc9Ng8SuEZcdgNJ_g&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> mapboxgl.Map(&#123;...&#125;)</span><br><span class="line"><span class="keyword">var</span> mapPrintTool = <span class="keyword">new</span> MapPrintTool(&#123;</span><br><span class="line">    <span class="attr">enableImg</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fileName</span>:<span class="string">&#x27;test.jpg&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"> map.addControl(mapPrintTool,<span class="string">&#x27;top-left&#x27;</span>)</span><br><span class="line"><span class="comment">//监听获取图片数据</span></span><br><span class="line"> mapPrintTool.on(<span class="string">&#x27;success&#x27;</span>,<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="配置项-–-两个绑定出现"><a href="#配置项-–-两个绑定出现" class="headerlink" title="配置项 – 两个绑定出现"></a>配置项 – 两个绑定出现</h2><table>
<thead>
<tr>
<th align="center">`</th>
<th align="center">名称</th>
<th align="center">类型</th>
<th align="center">描述</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">enableImg</td>
<td align="center">Boolean</td>
<td align="center">是否导出图片</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">fileName</td>
<td align="center">String</td>
<td align="center">导出的图片文件名</td>
<td align="center">‘map.jpg’</td>
</tr>
</tbody></table>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2></li>
<li><p>监听 <strong><code>success</code>**，获取 **<code>canvas</code>**转成的图片数据 **<code>base64</code></strong>   </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mapPrint = <span class="keyword">new</span> MapPrintTool()</span><br><span class="line">mapPrint.on(<span class="string">&#x27;success&#x27;</span>,<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ul>
<li><p>界面<br><img src="fullmap.png"></p>
</li>
<li><p>全图打印<br><img src="fullprint.jpg"></p>
</li>
<li><p>框选打印<br><img src="pariprint.jpg"></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2></li>
<li><p>github: <a href='https://github.com/JerckyLY/mapboxgl-print-tool' target="_blank" >mapboxgl-print-tool</a>  </p>
</li>
</ul>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-HqsYyaZb" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-HqsYyaZb"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "别怕我伤心",
              author: "张信哲",
              url: "//freetyst.nf.migu.cn/public/product7th/productB16/2020/07/0219/2020%E5%B9%B406%E6%9C%8830%E6%97%A515%E7%82%B948%E5%88%86%E6%89%B9%E9%87%8F%E9%A1%B9%E7%9B%AE%E5%92%AA%E5%92%95Believe1238%E9%A6%96-1/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/6993169X14T194000.mp3?key=fe249bf145d568a1&Tim=1597926843131&channelid=00&msisdn=e2718a9072794ba2b5ea4020539d9337&CI=6993169X14T2600918000000654481&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2019/0520/1828/AS1609221019195527.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>mapboxgl</tag>
        <tag>gis</tag>
        <tag>printTool</tag>
      </tags>
  </entry>
  <entry>
    <title>mapboxgl-measure-tool</title>
    <url>/2020/01/07/mapboxgl-measure-tool/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mapboxgl-measure-tool"><a href="#mapboxgl-measure-tool" class="headerlink" title="mapboxgl-measure-tool"></a><center>mapboxgl-measure-tool<center/></h2>   <center>基于mapboxgl、mapboxgl-draw、turf测量控件<center/>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>CDN:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--依赖--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://api.mapbox.com/mapbox-gl-js/v1.6.1/mapbox-gl.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/Turf.js/5.1.6/turf.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.0.9/mapbox-gl-draw.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!--引用--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/mapboxgl-measure-tool@1.0.6/dist/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    mapboxgl.accessToken = <span class="string">&#x27;pk.eyJ1IjoiamVyY2t5IiwiYSI6ImNqYjI5dWp3dzI1Y2YzMnM3eG0xNnV3bWsifQ.eQp4goc9Ng8SuEZcdgNJ_g&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> mapboxgl.Map(&#123;</span><br><span class="line">        <span class="attr">container</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">        <span class="attr">style</span>: <span class="string">&#x27;mapbox://styles/mapbox/streets-v9&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">      <span class="comment">// 为了使测量图层位于最高层，在添加其他业务图层之后，再引用控件</span></span><br><span class="line">    map.addControl(<span class="keyword">new</span> MapMeasureTool(), <span class="string">&#x27;top-right&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>模块化安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install mapboxgl-measure-tool</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MapMesure <span class="keyword">from</span> <span class="string">&#x27;mapboxgl-measure-tool&#x27;</span></span><br><span class="line">mapboxgl.accessToken = <span class="string">&#x27;pk.eyJ1IjoiamVyY2t5IiwiYSI6ImNqYjI5dWp3dzI1Y2YzMnM3eG0xNnV3bWsifQ.eQp4goc9Ng8SuEZcdgNJ_g&#x27;</span>;</span><br><span class="line"> <span class="keyword">var</span> map = <span class="keyword">new</span> mapboxgl.Map(&#123;</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&#x27;map&#x27;</span>,</span><br><span class="line">    <span class="attr">style</span>: <span class="string">&#x27;mapbox://styles/mapbox/streets-v9&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 为了使测量图层位于最高层，在添加其他业务图层之后，再引用控件</span></span><br><span class="line">map.addControl(<span class="keyword">new</span> MapMeasureTool(), <span class="string">&#x27;top-right&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意： <strong>避免出现测量图层被其他业务图层遮盖，需要在其他业务图层添加之后，再实例化测量控件</strong></p>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2></li>
<li><p>测距:<br><img src="line.png"></p>
</li>
<li><p>测面：<br><img src="area.png"></p>
</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul>
<li><p>github: <a href='https://github.com/JerckyLY/mapboxgl-measure-tools' target="_blank" >mapboxgl-measure-tool</a>  </p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-NQZHlOZb" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-NQZHlOZb"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "多想在平庸的生活拥抱你",
              author: "隔壁老樊",
              url: "//freetyst.nf.migu.cn/public/product5th/product33/2019/05/2317/2019%E5%B9%B404%E6%9C%8809%E6%97%A513%E7%82%B938%E5%88%86%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E6%88%90%E9%83%BD%E4%BA%91%E4%B9%8B%E7%91%B61%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/63364900301.mp3?key=1d2ced2b0053e5c9&Tim=1597926726720&channelid=00&msisdn=41604790a76444cab1a45930899ca62f&CI=633649003012600913000003421149&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/0801/0249/ASf1b833147de26840e610c45b96643885.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
</li>
</ul>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>mapboxgl</tag>
        <tag>measureIcontrol</tag>
        <tag>gis</tag>
      </tags>
  </entry>
  <entry>
    <title>基于开源olplot源码修改为mapboxgl版本-地图标绘</title>
    <url>/2019/09/10/mapbox-plot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<center>特殊的节日里，祝愿老师们节日快乐！</center> 

<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>啰嗦几句：最近经历了很多事情，生活上、工作上、感情上各种事情。就一句话，不会一直如自己愿的，命运总是看不惯一个人安逸太久。也一个多月没有更新技术博客了，一方面是工作太忙，真的很忙。一方面是心理的打击太大，没心思去写了。今天趁着心情缓解一些，就写一个关于工作中遇到的需求。地图标绘，基于mapboxgl版本的。</li>
<li>说实话，刚听到这个需求的时候，我的内心是拒绝的。因为了解mapboxgl的道友们都会明白，mapboxgl的api很少，真的很少。它是重在展示而不是交互。关于标绘，之前只是知道有这个东西，觉得很复杂，就没有深入了解其原理。其实即便是这次能粗略的改版成功，底层的算法我也是没有细看，只是了解其中的流程而已。<span id="more"></span>

</li>
</ul>
<h2 id="原理简介"><a href="#原理简介" class="headerlink" title="原理简介"></a>原理简介</h2><ul>
<li>总流程：标绘的总流程大致分为3步</li>
<li>第一步：根据鼠标点击事件获取几个关键点</li>
<li>第二步：用算法，根据所点击的关键点，生成其他的点</li>
<li>第三步：利用生成的点进行填充渲染。就得到了所需的标绘形状。</li>
<li>所以核心的还是在算法里面，所幸的是有位开源的大佬已经把算法写好了，看这里 <a href='https://gitee.com/ilocation/plot' target="_blank" ><strong><code>plot</code></strong></a> ,所以剩下的相对来说简单一点了。</li>
</ul>
<h2 id="现有问题"><a href="#现有问题" class="headerlink" title="现有问题"></a>现有问题</h2><ul>
<li>mapboxgl本身是不带绘制的功能的，就是没有像openlayers那样提供   <strong><code>Draw</code></strong> 方法的。</li>
<li>mapboxgl的图层数据源里面，只有类型为 <strong><code>geojson</code></strong> 是可以实时方便修改的，其他的数据源都是服务连接或者图片和视频，做不了标绘。</li>
<li>mapboxgl对点线面类型的图层，必须是分开的单独渲染。所以不能像openlayers一个图层可以同时展示三种类型的要素，进行渲染展示。</li>
<li>mapboxgl的popup和openlayers里面overlayer还是有些区别的。这也就影响了编辑拖拽的问题。不能像ol那样直接让overlayer的html元素样式为一个很小的方块。然后，后续的方法就不能使用了。</li>
<li>源码里面的算法是根据平面坐标进行计算的，但是mapboxgl里面获取的是经纬度。如果是按照经纬计算，那么最明显的问题，就是画圆的时候，画的是一个鸡蛋，而不是圆。</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>针对一个图层不能同时渲染点线面三种类型的要素，那么就创建三个图层分别渲染点线面。但是用的是同一个source数据。</li>
<li>由于mapboxgl本身是不带有点线面三种类型的定义的，我只能借助openlayers中的一些定义，然后获取最终的坐标数据，添加到source里面进行渲染。</li>
<li>对于popup问题，好在mapboxgl提供了marker类型的，而且还可以拖拽，那我只需在拖拽的事件中获取坐标数据就行了。</li>
<li>针对坐标系问题，在计算之前把经纬度坐标转成投影平面坐标就可以了，然后计算之后再换算经纬度就可以了。</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li>有了思路剩下的就是爬坑了，一点点的打断点进入源码，修改相关的方法和逻辑。</li>
<li>具体的我也没法用语言描述，只能说，多坚持就好了。</li>
<li>总之，做的时候很难的，几度是想要放弃的。刚开是一点头绪都没有。最后还是啃了下来，由于时间紧迫，编辑中移动整个标绘对象的功能没有完成。而且打包压缩，我是整个把ol的源码压缩进入的，所以js文件是比较大的。打包工具我也没有换，还是用的gulpfile打包工具。</li>
</ul>
<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><ul>
<li>展示一下成果：<br><img src="mapbox-plot.png" alt="image"></li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li>GitHub上有地址： <a href='https://github.com/JerckyLY/mapbox-plot' target="_blank" ><strong><code>mapbox-gl-plot</code></strong></a></li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  <strong><code>让过去的就过去吧，不是自己的，强求是真的换不来。命里有时终须有，命里无时莫强求。-----共勉</code></strong></p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-zVhhidNK" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-zVhhidNK"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "四块五",
              author: "隔壁老樊",
              url: "//freetyst.nf.migu.cn/public/product8th/product38/2019/12/2618/2019%E5%B9%B405%E6%9C%8821%E6%97%A515%E7%82%B943%E5%88%86%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E5%8D%8E%E5%A4%8F%E5%8A%A8%E5%A3%B01%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/63254103458.mp3?key=1339a141fd8db01a&Tim=1597921389241&channelid=00&msisdn=fa22ea77b488448b8e514de8a00dba34&CI=632541034582600913000003733019&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/0801/0249/ASf1b833147de26840e610c45b96643885.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>地图标绘</tag>
      </tags>
  </entry>
  <entry>
    <title>命运总是喜欢开玩笑</title>
    <url>/2019/08/08/life-emotion/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<center>趁着我现在还能抗的住</center> 

<hr>
<h2 id="纠结"><a href="#纠结" class="headerlink" title="纠结"></a>纠结</h2><ul>
<li><p>有一段时间，我打算写博客，却不知道从何处下手。自己觉得简单的东西，很多东西网上都可以搜到很多，写了感觉就像是重复造轮子。可是难的技术，却没有完全掌握，也不敢拿出来卖弄，以免误导。因此，陷入了两难的境界，而犹豫不决。</p>
</li>
<li><p>最近工作上的强度提升，心理上的又遭受到了重大打击，整个人都处于没有浑噩的状态，每天都会处于崩溃的边缘，不知道哪一天，我会彻底的压制不住那些所有的负面情绪，然后整个人爆发。趁着我还能抗的住，就觉得先试着放开。既然这个博客网站是自己的，那我自己不仅仅可以记录技术方面的，生活也同样可以。没有生活的人，不切实际。</p>
<span id="more"></span>

<h2 id="决定"><a href="#决定" class="headerlink" title="决定"></a>决定</h2></li>
<li><p>今天起，我的博客应该更加丰富，记录自己的人生的点点滴滴，不为别人，只为自己。</p>
</li>
<li><p>我是一个话很少的人，相对的，我更喜欢写。我喜欢沉寂在打字的平静之中，这样会让我放松，也可以更加的可以思考。</p>
<h2 id="我自己"><a href="#我自己" class="headerlink" title="我自己"></a>我自己</h2></li>
<li><p>每天处于心理上的痛苦，身体上的疲劳，整个人只有上下班和夜晚，戴着耳机听《蔡康永的情商课》才能让自己慢慢的平静下来。 我是属于情商低的那种，换言之就是现在的直男。对自己的情绪不能主导，经常会被情绪主导自己。我也是属于依赖型的人，对自己喜欢的东西，总是喜欢掌握，以至于没有控制好界限。这也是为什么，我会这次遭受打击的原因之一。</p>
<h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2></li>
<li><p>两年的社会生活，身上的学生气质也基本磨灭的不在了。我本以为，我很幸运。爱情，我毕业就收获到了，事业，也慢慢有了进步。安逸而又努力的度过了两年。可如今，命运总是在你充满希望的时候，给你开了一个大大的玩笑。短短两周，我失去了爱情。快的让我现在都无法接受，每天都只能默默承受。 每晚的夜不能寐，每天的锥心之痛，每日的身心疲惫。我不知道自己还能抗多久。我很感谢我的亲人朋友和同事，采取各种方式来安慰我。有个女生，她自己独自在国外，很坚强，我很佩服。她很耐心的听我倾诉各种负面情绪，只是为了让我可以好受些。我的亲人，一直安慰我会更好，我的同事也说让我想开点。我很谢谢他们。只是一个装睡的人，你是无法叫醒的。我自己不愿走出来，我放不下这份感情，痛我也不想放下。<br>写到现在，我也不知道自己要表达什么，只是想到哪就写哪了。如果还有机会重来，我会好好对她。</p>
<h2 id="经典之所以是经典，因为它深入人心"><a href="#经典之所以是经典，因为它深入人心" class="headerlink" title="经典之所以是经典，因为它深入人心"></a>经典之所以是经典，因为它深入人心</h2></li>
<li><p> 以前看《大话西游》的时候，看到那台词，觉得经典，却也只是经典而已。并没有觉得有过多的感触。如今，经历了之后，才发现经典是深入人心。</p>
</li>
<li><p><strong><code>曾经有一份真诚的爱情摆在我面前，我没有珍惜，等到了失去才后悔莫及，人世间最大的痛苦，莫过于此。如果上天能我一次机会，我一定会对那个女生说三个字，我爱你，如果要在这个感情上加个期限，我希望是一万年！</code></strong></p>
</li>
</ul>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-YCEjseTX" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-YCEjseTX"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "我配不上你",
              author: "夏天Alex",
              url: "//freetyst.nf.migu.cn/public/product5th/product27/2018/12/21/2018%E5%B9%B411%E6%9C%8819%E6%97%A517%E7%82%B919%E5%88%86%E7%B4%A7%E6%80%A5%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E9%9F%B3%E5%B0%9A%E5%BE%8B%E5%8A%A81%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/63296001988.mp3?key=7b49b216730fe578&Tim=1597921241112&channelid=00&msisdn=e3a8626df15349e0809797954aa4fe69&CI=632960019882600913000001401663&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2019/1031/0125/ASe08be7a32d20472eac2f083c4311aba8.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>再抗一下</tag>
      </tags>
  </entry>
  <entry>
    <title>Python---PostGIS生成矢量切片</title>
    <url>/2019/07/15/postgisVectorTile/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul>
<li>矢量数据，注重空间位置展示，属性隐含其中。</li>
<li>在矢量切片之前，web端的矢量数据展示分两种：<ul>
<li>按需请求，比如arcgis server发布的动态服务。这是按照范围内进行，返回要素和信息。这种频繁交互，增大服务器的压力。</li>
<li>一次加载全部，前端按需渲染。比如geoserver的wfs geojson格式加载 。这种遇到数据量大的时候，在页面初始加载时，会比较慢。</li>
</ul>
</li>
<li>针对上述两种情况，如果把矢量进行和栅格数据那样，按照金字塔的方式进行切片，但是保留原来矢量属性，那加载方式就会提升。矢量切片标准是mapbox 最先提出的，相关标准移步<a href="https://github.com/jingsam/vector-tile-spec/blob/master/2.1/README_zh.md" target="_blank">这里</a> <span id="more"></span>

</li>
</ul>
<h2 id="相关简介"><a href="#相关简介" class="headerlink" title="相关简介"></a>相关简介</h2><ul>
<li><p>矢量切片目前格式</p>
<ul>
<li>geojson、topjson、mvt(mapbox)</li>
</ul>
</li>
<li><p>相关工具</p>
<ul>
<li>目前我了解的矢量切片服务发布工具：arcpro、geoserver。其他的还没接触到</li>
</ul>
</li>
<li><p>postgis中的ST_AsMVT和ST_AsMVTGeom   </p>
<ul>
<li><a href="http://postgis.net/docs/ST_AsMVT.html" target="_blank">ST_AsMVT</a> 是postgis提供的空间函数，能够返回矢量切片，它和<a href="http://postgis.net/docs/ST_AsMVTGeom.html" target="_blank">ST_AsMVTGeom</a>是同时使用的。<br><img src="02.png" alt="st_AsMVT"><center>ST_AsMVT</center>   

</li>
</ul>
<p><img src="01.png" alt="st_AsMVTGeom"></p>
<center>ST_AsMVTGeom</center>   
 
- ST_AsMVTGeom能够对给定范围查询出来的矢量，并转换为屏幕坐标，然后ST_AsMVT对数据进行压缩，返回.mvt格式。

</li>
</ul>
<h2 id="矢量切片服务器"><a href="#矢量切片服务器" class="headerlink" title="矢量切片服务器"></a>矢量切片服务器</h2><ul>
<li>现在开源的前端gis框架，都是支持XYZ请求来加载地图服务。因此，写一个接口，前端传入ZXY,然后根据这些值，计算出对应的经纬度范围，查询该范围内的矢量，然后利用postgis提供的方法就能得到矢量切片。</li>
<li>相关代码：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//建立postgis连接</span><br><span class="line">  Dbpool = psycopg2.pool.SimpleConnectionPool(</span><br><span class="line">  1,</span><br><span class="line">  100,</span><br><span class="line">  dbname=&#x27;GISMVT&#x27;,</span><br><span class="line">  user=&#x27;postgres&#x27;,</span><br><span class="line">  host=&#x27;localhost&#x27;,</span><br><span class="line">  password=&#x27;admin&#x27;,</span><br><span class="line">  port=&#x27;5432&#x27;)</span><br><span class="line"></span><br><span class="line">//重要步骤 SQL查询语句  </span><br><span class="line">// &#x27;fills&#x27; 为source-layer (mapbox 加载矢量切片要用到)</span><br><span class="line">  query = &quot;SELECT  ST_AsMVT( tile , &#x27;fills&#x27; , 4096 , &#x27;geom&#x27; ) tiles FROM ( SELECT  ST_AsMVTGeom( w.geom , ST_Transform( ST_MakeEnvelope ( %s,%s,%s,%s,4326),3857),4096,256,true) AS geom FROM (SELECT  geom FROM public.china_point  ) w ) AS tile ;&quot;</span><br><span class="line"></span><br><span class="line">  //接口返回</span><br><span class="line">  @app.route(&#x27;/tiles/&lt;int:z&gt;/&lt;int:x&gt;/&lt;int:y&gt;&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class="line">  def tiles(z=0, x=0, y=0):</span><br><span class="line">      start_time = time.time()</span><br><span class="line">      tile = get_tile(z, x, y)</span><br><span class="line">      response = make_response(tile)</span><br><span class="line">      response.headers[&#x27;Content-Type&#x27;] = &quot;application/x-protobuf&quot;</span><br><span class="line">      response.headers[&#x27;Access-Control-Allow-Origin&#x27;] = &quot;*&quot;</span><br><span class="line">      response.headers[&#x27;Access-Control-Allow-Methods&#x27;] = &quot;POST,GET&quot;</span><br><span class="line">      end_time = time.time()</span><br><span class="line">      print(&quot;.........耗时: %d s&quot;%(end_time-start_time))</span><br><span class="line">      return response</span><br></pre></td></tr></table></figure>
<ul>
<li>源代码地址： 在github上 <a href='https://github.com/JerckyLY/postgis-stMvt' target='_blank'>这里</a></li>
</ul>
</li>
</ul>
<h2 id="加载效果"><a href="#加载效果" class="headerlink" title="加载效果"></a>加载效果</h2><ul>
<li>前端框架使用的是mapbox，这个框架相较于openlayers，leaflet来说，api接口是很少的，这个相对来说是注重于渲染展示层。但是它的样式渲染表达式，直接手写的话也不好调试，不过官方提供的mapbox studio可以进行相关的渲染，然后得到表达式。具体直接去访问官网 <a href="。https://docs.mapbox.com/mapbox-gl-js/api/" target="_blank">MapBoxGL</a>去查看即可。后续会介绍mapboxgl相关的基础。</li>
<li>结果展示：数据是随机生成的50万个点数据<br><img src="result.gif" alt="mapbox"><h2 id="番外篇"><a href="#番外篇" class="headerlink" title="番外篇"></a>番外篇</h2></li>
<li>本来是打算月初就写好的，结果自己电脑突然抽风，系统崩溃，然后重装系统。然后网线光猫又坏了。。。。各种杂事推迟了。果然计划赶不上变化，但结果终归是好的。共勉！<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-yogsKePg" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-yogsKePg"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "当年情",
              author: "张国荣",
              url: "//freetyst.nf.migu.cn/public/product5th/product34/2019/07/1822/2006%E5%B9%B412%E6%9C%8820%E6%97%A5%E6%AD%A3%E4%B8%9C/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/60056614211.mp3?key=048aa2220146a2da&Tim=1597927135476&channelid=00&msisdn=f1851c26e5ba48dfb34ffc25aec2531a&CI=600566142112600902000005385368&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/0401/1742/AS83409569fe0825a25faa0d3cafdd94bf.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
</li>
</ul>
]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>矢量切片</tag>
      </tags>
  </entry>
  <entry>
    <title>Python地图下载器---原理篇</title>
    <url>/2019/06/01/mapdownload/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<center>注重原理</center> 

<hr>
<h2 id="地图瓦片"><a href="#地图瓦片" class="headerlink" title="地图瓦片"></a>地图瓦片</h2><ul>
<li>为什么会出现瓦片：<ul>
<li>我们都知道浏览器渲染资源都是先从服务器下载，再进行渲染展示。那么，假设我们有个2G的影像数据，如果按照普遍的方法在前端展示。首先，要花一段时间从服务器把2G的影像下载下来，然后再话一段时间让浏览器进行渲染。而且这也只是当前范围内的。如果我们进行平移和缩放，那就要再次重复刚才那样的流程。这样是不符合实际的。<span id="more"></span></li>
<li>因此，切片就是预先根据客户的需求，对一个数据地图，对要展示的地理范围，按照需要的比例尺和等级进行切片，形成一个个图片，放在服务器中，等到需要展示的时候，只要找到对应区域的地图切片，然后在前端拼接展示即可。</li>
</ul>
</li>
<li>金字塔切片规则：<ul>
<li>刚才提到在服务器端对影像做切片处理，方法就是影像金字塔切图：<br><img src="02.png" alt="模型"><br><img src="01.png" alt="金字塔">  </li>
<li>地理范围不变，层级不同或者说分辨率不同，地图的切片数量不同。</li>
</ul>
</li>
<li>瓦片地图比例尺和分辨率：<ul>
<li>比例尺(scale):<br>图上一厘米代表实际多少厘米：例如1:500000 表示图上一厘米代表实际5000米。</li>
<li>分辨率(Resolution)：<br>代表当前地图范围内，1像素代表的实际地理单位 (X地图单位/像素) 即 分辨率和dpi(每英寸代表的像素数)和地图单位有关</li>
<li>根据比例尺求分辨率：<br>假设地图单位为米，dpi为96，那么已知：<br>1英寸 = 2.54厘米；<br>1英寸=96像素；<br>最终换单为米；<br>假设当前比例尺为1:500000，则代表图上1米代表实际500000米 ；<br>可得：1英寸=0.0254米=96像素；<br>1像素 = 0.0254/96 米；<br>则最后得出在1:500000比例尺下，分辨率：即图上1像素代表的实际距离为 500000*0.0254/96 = 132.2916666667 米</li>
</ul>
</li>
</ul>
<h2 id="切片行列号的计算原理"><a href="#切片行列号的计算原理" class="headerlink" title="切片行列号的计算原理"></a>切片行列号的计算原理</h2><ul>
<li><p>前面说了切片一些原理，同时提到金字塔影像切图方法，那么如果在前端展示某个地理范围，某个等级下的切片。我们就需要知道这片区域的行列号，按需加载请求展示。</p>
</li>
<li><p>同时说了分辨率的计算。为什么要说分辨率因为切片行列号的计算，是和分辨率分不开的。如果你不知道分辨率，也不知道比例尺，那就求不了行列号。</p>
</li>
<li><p>某个点(x,y)对应的行列号的计算公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">col = floor((x0 - x)/( tileSize * resolution))  </span><br><span class="line">row = floor((y0 - y)/( tileSize * resolution)) </span><br></pre></td></tr></table></figure>
<p>其中 切片源点(x0,y0)， tileSize切片大小，一般为256,也有的是512的，resolution分辨率，图上1像素代表的实际地理单位。<br>公式说白了就是，一个瓦片代表的实际距离为L,点（x,y）距离的源点(x0,y0)的实际地理距离R,然后用R/L即可求得对应的行列号。</p>
<h2 id="实际运用计算行列号原理"><a href="#实际运用计算行列号原理" class="headerlink" title="实际运用计算行列号原理"></a>实际运用计算行列号原理</h2></li>
<li><p>在实际运用计算行列号进行地图下载时，我们需要知道地理范围的bound（经纬度表示），即左上角的地理坐标(minLon,maxLat)，和右下角的地理坐标(maxLon,minLat)</p>
</li>
<li><p>bound的获取方式，我一般都是用天地图的行政区查询接口<br><a href='http://lbs.tianditu.gov.cn/server/administrative.html' target="_blank" >天地图行政查询接口</a><br><img src="03.png" alt="bound">   </p>
</li>
<li><p>结果中的’bound’即为要获取的值 </p>
</li>
<li><p>知道bound，然后依次求出该地理范围内对应的起始行列号：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//需要把经纬度转成web墨卡托平面坐标  X代表的是列，Y代表是行</span><br><span class="line">leftTopX = Math.floor((Math.abs(originX - minX))/resolution*tileSize); </span><br><span class="line">leftTopY = Math.floor((Math.abs(originY - maxY))/resolution*tileSize);</span><br><span class="line">...</span><br><span class="line">//按照上面公式继续求出起始行列号</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在一个不成文的规定是，web端的底图投影的都是采用的web墨卡托投影。上述公式中的’originX,originY’是切片的源点，如果是按照google——tms标准的话，源点为左上角即：( -20037508.342787, 20037508.342787)。如果是标准的tms规则，则源点为左下角( -20037508.342787, -20037508.342787);因此下载地图的时候需要确定一下自己下载的地图是按照上面切片标准来的。这篇文章中可以查看到 <a href="https://segmentfault.com/a/1190000011276788" target="_blank">这里</a> </p>
</li>
</ul>
<h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><ul>
<li>知道bound，求出了起始行列号，剩下的就是进行下载地图了。</li>
<li><a href="https://github.com/JerckyLY/tileMapDownload" target="_blank">mapDownload</a> </li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>实际切片的原理不止这些。本文介绍的只是其中的一部分，还有很多基础原理没有介绍。我也没有具体掌握好就不再卖弄了。等我真正掌握了再后续补上。祝各位大小朋友，节日快乐！</li>
</ul>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-GjVWMcGV" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-GjVWMcGV"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "太傻",
              author: "巫启贤",
              url: "//freetyst.nf.migu.cn/public/product5th/product32/2019/05/1422/2018%E5%B9%B411%E6%9C%8808%E6%97%A520%E7%82%B930%E5%88%86%E6%89%B9%E9%87%8F%E9%A1%B9%E7%9B%AE%E5%8D%8E%E7%BA%B35%E9%A6%96-7/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/6005751JBR6.mp3?key=8b4c5ca40d1b5f1b&Tim=1597926985398&channelid=00&msisdn=fcfdb6a577e14af687b7c1a246ef5fef&CI=6005751JBR62600910000009066508&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2020/0815/0316/ASc842ff40d93ed16c3db4496bc8ab4f05.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>








]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>地图下载器</tag>
      </tags>
  </entry>
  <entry>
    <title>Python转geoserver以及arcgis的切片目录规则为TMS目录</title>
    <url>/2019/05/12/totms/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<center>祝愿所有的妈妈们，节日快乐！</center>

<hr>
<h2 id="地图服务切片简介"><a href="#地图服务切片简介" class="headerlink" title="地图服务切片简介"></a>地图服务切片简介</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;关于切片网上有很多的介绍，在此不再多余赘述，想要了解可以看<a
href="https://segmentfault.com/a/1190000011276788"
target="_blank">这里</a> 目前我接触到主流的切片生成工具是：arcgis,geoserver。它们各自都有一套自己的切片目录规则。</p>
<span id="more"></span>
<p>geoserver切片目录规则(图片是网上copy的):</p>
<p><img src="geoservertile.png" alt="geoserver"></p>
<ul>
<li><p>其中’EPSG_900913_05’中的05代表等级，’24_17.png’中的24代表列号即 x, 17代表的是行号 即 y</p>
<p>arcgis切片目录规则(图片是网上copy的)：</p>
</li>
</ul>
<p><img src="arcgisTile.png" alt="arcgis"></p>
<ul>
<li>其中’L03’代表等级为3，”R00000002”中的’R’是行即 y,’00000002’为行号是16进制的数值。’C00000001’中的’C’是列即 x,’00000001’为列号，16进制数值</li>
</ul>
<p>tms目录规则(图片是网上copy的)：<br><img src="tma.png" alt="tms"></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;通过图片，能看到三种的目录规则是不一样的，那么当我们想要离线部署时就不方便了。因此,把geoserver或者arcgis的切片目录规则转成google–tms或者标准的tms(这两个区别主要是切片源点不一样，google–tms源点是在左上角，标准的tms源点是在左下角)<br>然后用<a href='http://nginx.org/en/' target="_blank" />Nginx</a>代理一下，就能很容易实现离线部署。</p>
<h2 id="代码资源"><a href="#代码资源" class="headerlink" title="代码资源"></a>代码资源</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;关于这两种的转换，我已经写好了，放到了github中，其中geoserver是针对3857坐标系的.pbf文件，其他的目录结构请适当修改即可。</p>
<p>1、 <a href="https://github.com/JerckyLY/geoserverToTMS" target="_blank">geoserver</a> </p>
<p>2、 <a href="https://github.com/JerckyLY/arcgisToTMS"
target="_blank">arcgis</a></p>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-RePslZGm" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-RePslZGm"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "无人之岛",
              author: "任然",
              url: "//freetyst.nf.migu.cn/public/product9th/product41/2020/08/1013/2019%E5%B9%B409%E6%9C%8820%E6%97%A516%E7%82%B913%E5%88%86%E5%86%85%E5%AE%B9%E5%87%86%E5%85%A5%E5%8D%83%E5%92%8C%E4%B8%96%E7%BA%AA999%E9%A6%96/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/64043202509132526.mp3?key=602a54c7b2327b55&Tim=1597927310330&channelid=00&msisdn=3e322494369e46648f1bdcf6cd39ba64&CI=640432025092600913000006682591&F=000009",
              pic: "https://cdnmusic.migu.cn/picture/2019/0523/0842/AS8de7410174e84a96a668aaf4882af9f0.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>




]]></content>
      <categories>
        <category>GIS</category>
      </categories>
      <tags>
        <tag>geoserver</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个博客庆祝一下</title>
    <url>/2019/05/12/first/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>不忘初心，守护---毕生的追求!</center>

<span id="more"></span>
<h2 id="音乐小憩"><a href="#音乐小憩" class="headerlink" title="音乐小憩"></a>音乐小憩</h2>
        <div id="aplayer-inWOSeTB" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content"></pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-inWOSeTB"),
            narrow: false,
            autoplay: false,
            showlrc: false,
            music: {
              title: "故梦",
              author: "双笙",
              url: "https://lc-gluttony.s3.amazonaws.com/LJltQYKflcAs/c37686f6927aa2efc686.mp3/%E5%8F%8C%E7%AC%99-%E6%95%85%E6%A2%A6.mp3",
              pic: "https://p3fx.kgimg.com/stdmusic/20161031/20161031031155638803.jpg",
              lrc: ""
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>开心时刻</tag>
      </tags>
  </entry>
</search>
